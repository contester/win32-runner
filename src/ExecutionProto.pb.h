// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExecutionProto.proto

#ifndef PROTOBUF_ExecutionProto_2eproto__INCLUDED
#define PROTOBUF_ExecutionProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "BlobProto.pb.h"
// @@protoc_insertion_point(includes)

namespace contester {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExecutionProto_2eproto();
void protobuf_AssignDesc_ExecutionProto_2eproto();
void protobuf_ShutdownFile_ExecutionProto_2eproto();

class RedirectParameters;
class ExecutionResultFlags;
class ExecutionResultTime;

// ===================================================================

class RedirectParameters : public ::google::protobuf::Message {
 public:
  RedirectParameters();
  virtual ~RedirectParameters();
  
  RedirectParameters(const RedirectParameters& from);
  
  inline RedirectParameters& operator=(const RedirectParameters& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedirectParameters& default_instance();
  
  void Swap(RedirectParameters* other);
  
  // implements Message ----------------------------------------------
  
  RedirectParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedirectParameters& from);
  void MergeFrom(const RedirectParameters& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  
  // optional bool memory = 2;
  inline bool has_memory() const;
  inline void clear_memory();
  static const int kMemoryFieldNumber = 2;
  inline bool memory() const;
  inline void set_memory(bool value);
  
  // optional .contester.proto.Blob buffer = 3;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 3;
  inline const ::contester::proto::Blob& buffer() const;
  inline ::contester::proto::Blob* mutable_buffer();
  
  // @@protoc_insertion_point(class_scope:contester.proto.RedirectParameters)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* filename_;
  static const ::std::string _default_filename_;
  bool memory_;
  ::contester::proto::Blob* buffer_;
  friend void  protobuf_AddDesc_ExecutionProto_2eproto();
  friend void protobuf_AssignDesc_ExecutionProto_2eproto();
  friend void protobuf_ShutdownFile_ExecutionProto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RedirectParameters* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionResultFlags : public ::google::protobuf::Message {
 public:
  ExecutionResultFlags();
  virtual ~ExecutionResultFlags();
  
  ExecutionResultFlags(const ExecutionResultFlags& from);
  
  inline ExecutionResultFlags& operator=(const ExecutionResultFlags& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionResultFlags& default_instance();
  
  void Swap(ExecutionResultFlags* other);
  
  // implements Message ----------------------------------------------
  
  ExecutionResultFlags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionResultFlags& from);
  void MergeFrom(const ExecutionResultFlags& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool killed = 1;
  inline bool has_killed() const;
  inline void clear_killed();
  static const int kKilledFieldNumber = 1;
  inline bool killed() const;
  inline void set_killed(bool value);
  
  // optional bool time_limit_hit = 2;
  inline bool has_time_limit_hit() const;
  inline void clear_time_limit_hit();
  static const int kTimeLimitHitFieldNumber = 2;
  inline bool time_limit_hit() const;
  inline void set_time_limit_hit(bool value);
  
  // optional bool memory_limit_hit = 3;
  inline bool has_memory_limit_hit() const;
  inline void clear_memory_limit_hit();
  static const int kMemoryLimitHitFieldNumber = 3;
  inline bool memory_limit_hit() const;
  inline void set_memory_limit_hit(bool value);
  
  // optional bool inactive = 4;
  inline bool has_inactive() const;
  inline void clear_inactive();
  static const int kInactiveFieldNumber = 4;
  inline bool inactive() const;
  inline void set_inactive(bool value);
  
  // optional bool time_limit_hard = 5;
  inline bool has_time_limit_hard() const;
  inline void clear_time_limit_hard();
  static const int kTimeLimitHardFieldNumber = 5;
  inline bool time_limit_hard() const;
  inline void set_time_limit_hard(bool value);
  
  // optional bool stdout_overflow = 6;
  inline bool has_stdout_overflow() const;
  inline void clear_stdout_overflow();
  static const int kStdoutOverflowFieldNumber = 6;
  inline bool stdout_overflow() const;
  inline void set_stdout_overflow(bool value);
  
  // optional bool stderr_overflow = 7;
  inline bool has_stderr_overflow() const;
  inline void clear_stderr_overflow();
  static const int kStderrOverflowFieldNumber = 7;
  inline bool stderr_overflow() const;
  inline void set_stderr_overflow(bool value);
  
  // optional bool stdpipe_timeout = 8;
  inline bool has_stdpipe_timeout() const;
  inline void clear_stdpipe_timeout();
  static const int kStdpipeTimeoutFieldNumber = 8;
  inline bool stdpipe_timeout() const;
  inline void set_stdpipe_timeout(bool value);
  
  // optional bool time_limit_hit_post = 9;
  inline bool has_time_limit_hit_post() const;
  inline void clear_time_limit_hit_post();
  static const int kTimeLimitHitPostFieldNumber = 9;
  inline bool time_limit_hit_post() const;
  inline void set_time_limit_hit_post(bool value);
  
  // optional bool memory_limit_hit_post = 10;
  inline bool has_memory_limit_hit_post() const;
  inline void clear_memory_limit_hit_post();
  static const int kMemoryLimitHitPostFieldNumber = 10;
  inline bool memory_limit_hit_post() const;
  inline void set_memory_limit_hit_post(bool value);
  
  // optional bool process_limit_hit = 11;
  inline bool has_process_limit_hit() const;
  inline void clear_process_limit_hit();
  static const int kProcessLimitHitFieldNumber = 11;
  inline bool process_limit_hit() const;
  inline void set_process_limit_hit(bool value);
  
  // @@protoc_insertion_point(class_scope:contester.proto.ExecutionResultFlags)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool killed_;
  bool time_limit_hit_;
  bool memory_limit_hit_;
  bool inactive_;
  bool time_limit_hard_;
  bool stdout_overflow_;
  bool stderr_overflow_;
  bool stdpipe_timeout_;
  bool time_limit_hit_post_;
  bool memory_limit_hit_post_;
  bool process_limit_hit_;
  friend void  protobuf_AddDesc_ExecutionProto_2eproto();
  friend void protobuf_AssignDesc_ExecutionProto_2eproto();
  friend void protobuf_ShutdownFile_ExecutionProto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ExecutionResultFlags* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionResultTime : public ::google::protobuf::Message {
 public:
  ExecutionResultTime();
  virtual ~ExecutionResultTime();
  
  ExecutionResultTime(const ExecutionResultTime& from);
  
  inline ExecutionResultTime& operator=(const ExecutionResultTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionResultTime& default_instance();
  
  void Swap(ExecutionResultTime* other);
  
  // implements Message ----------------------------------------------
  
  ExecutionResultTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionResultTime& from);
  void MergeFrom(const ExecutionResultTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 user_time = 1;
  inline bool has_user_time() const;
  inline void clear_user_time();
  static const int kUserTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 user_time() const;
  inline void set_user_time(::google::protobuf::uint64 value);
  
  // optional uint64 kernel_time = 2;
  inline bool has_kernel_time() const;
  inline void clear_kernel_time();
  static const int kKernelTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 kernel_time() const;
  inline void set_kernel_time(::google::protobuf::uint64 value);
  
  // optional uint64 wall_time = 3;
  inline bool has_wall_time() const;
  inline void clear_wall_time();
  static const int kWallTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 wall_time() const;
  inline void set_wall_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:contester.proto.ExecutionResultTime)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 user_time_;
  ::google::protobuf::uint64 kernel_time_;
  ::google::protobuf::uint64 wall_time_;
  friend void  protobuf_AddDesc_ExecutionProto_2eproto();
  friend void protobuf_AssignDesc_ExecutionProto_2eproto();
  friend void protobuf_ShutdownFile_ExecutionProto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ExecutionResultTime* default_instance_;
};
// ===================================================================


// ===================================================================

// RedirectParameters

// optional string filename = 1;
inline bool RedirectParameters::has_filename() const {
  return _has_bit(0);
}
inline void RedirectParameters::clear_filename() {
  if (filename_ != &_default_filename_) {
    filename_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RedirectParameters::filename() const {
  return *filename_;
}
inline void RedirectParameters::set_filename(const ::std::string& value) {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void RedirectParameters::set_filename(const char* value) {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void RedirectParameters::set_filename(const char* value, size_t size) {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedirectParameters::mutable_filename() {
  _set_bit(0);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  return filename_;
}

// optional bool memory = 2;
inline bool RedirectParameters::has_memory() const {
  return _has_bit(1);
}
inline void RedirectParameters::clear_memory() {
  memory_ = false;
  _clear_bit(1);
}
inline bool RedirectParameters::memory() const {
  return memory_;
}
inline void RedirectParameters::set_memory(bool value) {
  _set_bit(1);
  memory_ = value;
}

// optional .contester.proto.Blob buffer = 3;
inline bool RedirectParameters::has_buffer() const {
  return _has_bit(2);
}
inline void RedirectParameters::clear_buffer() {
  if (buffer_ != NULL) buffer_->::contester::proto::Blob::Clear();
  _clear_bit(2);
}
inline const ::contester::proto::Blob& RedirectParameters::buffer() const {
  return buffer_ != NULL ? *buffer_ : *default_instance_->buffer_;
}
inline ::contester::proto::Blob* RedirectParameters::mutable_buffer() {
  _set_bit(2);
  if (buffer_ == NULL) buffer_ = new ::contester::proto::Blob;
  return buffer_;
}

// -------------------------------------------------------------------

// ExecutionResultFlags

// optional bool killed = 1;
inline bool ExecutionResultFlags::has_killed() const {
  return _has_bit(0);
}
inline void ExecutionResultFlags::clear_killed() {
  killed_ = false;
  _clear_bit(0);
}
inline bool ExecutionResultFlags::killed() const {
  return killed_;
}
inline void ExecutionResultFlags::set_killed(bool value) {
  _set_bit(0);
  killed_ = value;
}

// optional bool time_limit_hit = 2;
inline bool ExecutionResultFlags::has_time_limit_hit() const {
  return _has_bit(1);
}
inline void ExecutionResultFlags::clear_time_limit_hit() {
  time_limit_hit_ = false;
  _clear_bit(1);
}
inline bool ExecutionResultFlags::time_limit_hit() const {
  return time_limit_hit_;
}
inline void ExecutionResultFlags::set_time_limit_hit(bool value) {
  _set_bit(1);
  time_limit_hit_ = value;
}

// optional bool memory_limit_hit = 3;
inline bool ExecutionResultFlags::has_memory_limit_hit() const {
  return _has_bit(2);
}
inline void ExecutionResultFlags::clear_memory_limit_hit() {
  memory_limit_hit_ = false;
  _clear_bit(2);
}
inline bool ExecutionResultFlags::memory_limit_hit() const {
  return memory_limit_hit_;
}
inline void ExecutionResultFlags::set_memory_limit_hit(bool value) {
  _set_bit(2);
  memory_limit_hit_ = value;
}

// optional bool inactive = 4;
inline bool ExecutionResultFlags::has_inactive() const {
  return _has_bit(3);
}
inline void ExecutionResultFlags::clear_inactive() {
  inactive_ = false;
  _clear_bit(3);
}
inline bool ExecutionResultFlags::inactive() const {
  return inactive_;
}
inline void ExecutionResultFlags::set_inactive(bool value) {
  _set_bit(3);
  inactive_ = value;
}

// optional bool time_limit_hard = 5;
inline bool ExecutionResultFlags::has_time_limit_hard() const {
  return _has_bit(4);
}
inline void ExecutionResultFlags::clear_time_limit_hard() {
  time_limit_hard_ = false;
  _clear_bit(4);
}
inline bool ExecutionResultFlags::time_limit_hard() const {
  return time_limit_hard_;
}
inline void ExecutionResultFlags::set_time_limit_hard(bool value) {
  _set_bit(4);
  time_limit_hard_ = value;
}

// optional bool stdout_overflow = 6;
inline bool ExecutionResultFlags::has_stdout_overflow() const {
  return _has_bit(5);
}
inline void ExecutionResultFlags::clear_stdout_overflow() {
  stdout_overflow_ = false;
  _clear_bit(5);
}
inline bool ExecutionResultFlags::stdout_overflow() const {
  return stdout_overflow_;
}
inline void ExecutionResultFlags::set_stdout_overflow(bool value) {
  _set_bit(5);
  stdout_overflow_ = value;
}

// optional bool stderr_overflow = 7;
inline bool ExecutionResultFlags::has_stderr_overflow() const {
  return _has_bit(6);
}
inline void ExecutionResultFlags::clear_stderr_overflow() {
  stderr_overflow_ = false;
  _clear_bit(6);
}
inline bool ExecutionResultFlags::stderr_overflow() const {
  return stderr_overflow_;
}
inline void ExecutionResultFlags::set_stderr_overflow(bool value) {
  _set_bit(6);
  stderr_overflow_ = value;
}

// optional bool stdpipe_timeout = 8;
inline bool ExecutionResultFlags::has_stdpipe_timeout() const {
  return _has_bit(7);
}
inline void ExecutionResultFlags::clear_stdpipe_timeout() {
  stdpipe_timeout_ = false;
  _clear_bit(7);
}
inline bool ExecutionResultFlags::stdpipe_timeout() const {
  return stdpipe_timeout_;
}
inline void ExecutionResultFlags::set_stdpipe_timeout(bool value) {
  _set_bit(7);
  stdpipe_timeout_ = value;
}

// optional bool time_limit_hit_post = 9;
inline bool ExecutionResultFlags::has_time_limit_hit_post() const {
  return _has_bit(8);
}
inline void ExecutionResultFlags::clear_time_limit_hit_post() {
  time_limit_hit_post_ = false;
  _clear_bit(8);
}
inline bool ExecutionResultFlags::time_limit_hit_post() const {
  return time_limit_hit_post_;
}
inline void ExecutionResultFlags::set_time_limit_hit_post(bool value) {
  _set_bit(8);
  time_limit_hit_post_ = value;
}

// optional bool memory_limit_hit_post = 10;
inline bool ExecutionResultFlags::has_memory_limit_hit_post() const {
  return _has_bit(9);
}
inline void ExecutionResultFlags::clear_memory_limit_hit_post() {
  memory_limit_hit_post_ = false;
  _clear_bit(9);
}
inline bool ExecutionResultFlags::memory_limit_hit_post() const {
  return memory_limit_hit_post_;
}
inline void ExecutionResultFlags::set_memory_limit_hit_post(bool value) {
  _set_bit(9);
  memory_limit_hit_post_ = value;
}

// optional bool process_limit_hit = 11;
inline bool ExecutionResultFlags::has_process_limit_hit() const {
  return _has_bit(10);
}
inline void ExecutionResultFlags::clear_process_limit_hit() {
  process_limit_hit_ = false;
  _clear_bit(10);
}
inline bool ExecutionResultFlags::process_limit_hit() const {
  return process_limit_hit_;
}
inline void ExecutionResultFlags::set_process_limit_hit(bool value) {
  _set_bit(10);
  process_limit_hit_ = value;
}

// -------------------------------------------------------------------

// ExecutionResultTime

// optional uint64 user_time = 1;
inline bool ExecutionResultTime::has_user_time() const {
  return _has_bit(0);
}
inline void ExecutionResultTime::clear_user_time() {
  user_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ExecutionResultTime::user_time() const {
  return user_time_;
}
inline void ExecutionResultTime::set_user_time(::google::protobuf::uint64 value) {
  _set_bit(0);
  user_time_ = value;
}

// optional uint64 kernel_time = 2;
inline bool ExecutionResultTime::has_kernel_time() const {
  return _has_bit(1);
}
inline void ExecutionResultTime::clear_kernel_time() {
  kernel_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 ExecutionResultTime::kernel_time() const {
  return kernel_time_;
}
inline void ExecutionResultTime::set_kernel_time(::google::protobuf::uint64 value) {
  _set_bit(1);
  kernel_time_ = value;
}

// optional uint64 wall_time = 3;
inline bool ExecutionResultTime::has_wall_time() const {
  return _has_bit(2);
}
inline void ExecutionResultTime::clear_wall_time() {
  wall_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 ExecutionResultTime::wall_time() const {
  return wall_time_;
}
inline void ExecutionResultTime::set_wall_time(::google::protobuf::uint64 value) {
  _set_bit(2);
  wall_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace contester

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExecutionProto_2eproto__INCLUDED
