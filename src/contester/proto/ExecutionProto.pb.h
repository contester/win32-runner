// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contester/proto/ExecutionProto.proto

#ifndef PROTOBUF_contester_2fproto_2fExecutionProto_2eproto__INCLUDED
#define PROTOBUF_contester_2fproto_2fExecutionProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "contester/proto/BlobProto.pb.h"
// @@protoc_insertion_point(includes)

namespace contester {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();
void protobuf_AssignDesc_contester_2fproto_2fExecutionProto_2eproto();
void protobuf_ShutdownFile_contester_2fproto_2fExecutionProto_2eproto();

class RedirectParameters;
class ExecutionResultFlags;
class ExecutionResultTime;

// ===================================================================

class RedirectParameters : public ::google::protobuf::Message {
 public:
  RedirectParameters();
  virtual ~RedirectParameters();
  
  RedirectParameters(const RedirectParameters& from);
  
  inline RedirectParameters& operator=(const RedirectParameters& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedirectParameters& default_instance();
  
  void Swap(RedirectParameters* other);
  
  // implements Message ----------------------------------------------
  
  RedirectParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedirectParameters& from);
  void MergeFrom(const RedirectParameters& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // optional bool memory = 2;
  inline bool has_memory() const;
  inline void clear_memory();
  static const int kMemoryFieldNumber = 2;
  inline bool memory() const;
  inline void set_memory(bool value);
  
  // optional .contester.proto.Blob buffer = 3;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 3;
  inline const ::contester::proto::Blob& buffer() const;
  inline ::contester::proto::Blob* mutable_buffer();
  inline ::contester::proto::Blob* release_buffer();
  
  // @@protoc_insertion_point(class_scope:contester.proto.RedirectParameters)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_memory();
  inline void clear_has_memory();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* filename_;
  ::contester::proto::Blob* buffer_;
  bool memory_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();
  friend void protobuf_AssignDesc_contester_2fproto_2fExecutionProto_2eproto();
  friend void protobuf_ShutdownFile_contester_2fproto_2fExecutionProto_2eproto();
  
  void InitAsDefaultInstance();
  static RedirectParameters* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionResultFlags : public ::google::protobuf::Message {
 public:
  ExecutionResultFlags();
  virtual ~ExecutionResultFlags();
  
  ExecutionResultFlags(const ExecutionResultFlags& from);
  
  inline ExecutionResultFlags& operator=(const ExecutionResultFlags& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionResultFlags& default_instance();
  
  void Swap(ExecutionResultFlags* other);
  
  // implements Message ----------------------------------------------
  
  ExecutionResultFlags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionResultFlags& from);
  void MergeFrom(const ExecutionResultFlags& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool killed = 1;
  inline bool has_killed() const;
  inline void clear_killed();
  static const int kKilledFieldNumber = 1;
  inline bool killed() const;
  inline void set_killed(bool value);
  
  // optional bool time_limit_hit = 2;
  inline bool has_time_limit_hit() const;
  inline void clear_time_limit_hit();
  static const int kTimeLimitHitFieldNumber = 2;
  inline bool time_limit_hit() const;
  inline void set_time_limit_hit(bool value);
  
  // optional bool memory_limit_hit = 3;
  inline bool has_memory_limit_hit() const;
  inline void clear_memory_limit_hit();
  static const int kMemoryLimitHitFieldNumber = 3;
  inline bool memory_limit_hit() const;
  inline void set_memory_limit_hit(bool value);
  
  // optional bool inactive = 4;
  inline bool has_inactive() const;
  inline void clear_inactive();
  static const int kInactiveFieldNumber = 4;
  inline bool inactive() const;
  inline void set_inactive(bool value);
  
  // optional bool time_limit_hard = 5;
  inline bool has_time_limit_hard() const;
  inline void clear_time_limit_hard();
  static const int kTimeLimitHardFieldNumber = 5;
  inline bool time_limit_hard() const;
  inline void set_time_limit_hard(bool value);
  
  // optional bool stdout_overflow = 6;
  inline bool has_stdout_overflow() const;
  inline void clear_stdout_overflow();
  static const int kStdoutOverflowFieldNumber = 6;
  inline bool stdout_overflow() const;
  inline void set_stdout_overflow(bool value);
  
  // optional bool stderr_overflow = 7;
  inline bool has_stderr_overflow() const;
  inline void clear_stderr_overflow();
  static const int kStderrOverflowFieldNumber = 7;
  inline bool stderr_overflow() const;
  inline void set_stderr_overflow(bool value);
  
  // optional bool stdpipe_timeout = 8;
  inline bool has_stdpipe_timeout() const;
  inline void clear_stdpipe_timeout();
  static const int kStdpipeTimeoutFieldNumber = 8;
  inline bool stdpipe_timeout() const;
  inline void set_stdpipe_timeout(bool value);
  
  // optional bool time_limit_hit_post = 9;
  inline bool has_time_limit_hit_post() const;
  inline void clear_time_limit_hit_post();
  static const int kTimeLimitHitPostFieldNumber = 9;
  inline bool time_limit_hit_post() const;
  inline void set_time_limit_hit_post(bool value);
  
  // optional bool memory_limit_hit_post = 10;
  inline bool has_memory_limit_hit_post() const;
  inline void clear_memory_limit_hit_post();
  static const int kMemoryLimitHitPostFieldNumber = 10;
  inline bool memory_limit_hit_post() const;
  inline void set_memory_limit_hit_post(bool value);
  
  // optional bool process_limit_hit = 11;
  inline bool has_process_limit_hit() const;
  inline void clear_process_limit_hit();
  static const int kProcessLimitHitFieldNumber = 11;
  inline bool process_limit_hit() const;
  inline void set_process_limit_hit(bool value);
  
  // optional bool stopped_by_signal = 12;
  inline bool has_stopped_by_signal() const;
  inline void clear_stopped_by_signal();
  static const int kStoppedBySignalFieldNumber = 12;
  inline bool stopped_by_signal() const;
  inline void set_stopped_by_signal(bool value);
  
  // optional bool killed_by_signal = 13;
  inline bool has_killed_by_signal() const;
  inline void clear_killed_by_signal();
  static const int kKilledBySignalFieldNumber = 13;
  inline bool killed_by_signal() const;
  inline void set_killed_by_signal(bool value);
  
  // @@protoc_insertion_point(class_scope:contester.proto.ExecutionResultFlags)
 private:
  inline void set_has_killed();
  inline void clear_has_killed();
  inline void set_has_time_limit_hit();
  inline void clear_has_time_limit_hit();
  inline void set_has_memory_limit_hit();
  inline void clear_has_memory_limit_hit();
  inline void set_has_inactive();
  inline void clear_has_inactive();
  inline void set_has_time_limit_hard();
  inline void clear_has_time_limit_hard();
  inline void set_has_stdout_overflow();
  inline void clear_has_stdout_overflow();
  inline void set_has_stderr_overflow();
  inline void clear_has_stderr_overflow();
  inline void set_has_stdpipe_timeout();
  inline void clear_has_stdpipe_timeout();
  inline void set_has_time_limit_hit_post();
  inline void clear_has_time_limit_hit_post();
  inline void set_has_memory_limit_hit_post();
  inline void clear_has_memory_limit_hit_post();
  inline void set_has_process_limit_hit();
  inline void clear_has_process_limit_hit();
  inline void set_has_stopped_by_signal();
  inline void clear_has_stopped_by_signal();
  inline void set_has_killed_by_signal();
  inline void clear_has_killed_by_signal();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool killed_;
  bool time_limit_hit_;
  bool memory_limit_hit_;
  bool inactive_;
  bool time_limit_hard_;
  bool stdout_overflow_;
  bool stderr_overflow_;
  bool stdpipe_timeout_;
  bool time_limit_hit_post_;
  bool memory_limit_hit_post_;
  bool process_limit_hit_;
  bool stopped_by_signal_;
  bool killed_by_signal_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();
  friend void protobuf_AssignDesc_contester_2fproto_2fExecutionProto_2eproto();
  friend void protobuf_ShutdownFile_contester_2fproto_2fExecutionProto_2eproto();
  
  void InitAsDefaultInstance();
  static ExecutionResultFlags* default_instance_;
};
// -------------------------------------------------------------------

class ExecutionResultTime : public ::google::protobuf::Message {
 public:
  ExecutionResultTime();
  virtual ~ExecutionResultTime();
  
  ExecutionResultTime(const ExecutionResultTime& from);
  
  inline ExecutionResultTime& operator=(const ExecutionResultTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionResultTime& default_instance();
  
  void Swap(ExecutionResultTime* other);
  
  // implements Message ----------------------------------------------
  
  ExecutionResultTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecutionResultTime& from);
  void MergeFrom(const ExecutionResultTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 user_time_micros = 1;
  inline bool has_user_time_micros() const;
  inline void clear_user_time_micros();
  static const int kUserTimeMicrosFieldNumber = 1;
  inline ::google::protobuf::uint64 user_time_micros() const;
  inline void set_user_time_micros(::google::protobuf::uint64 value);
  
  // optional uint64 kernel_time_micros = 2;
  inline bool has_kernel_time_micros() const;
  inline void clear_kernel_time_micros();
  static const int kKernelTimeMicrosFieldNumber = 2;
  inline ::google::protobuf::uint64 kernel_time_micros() const;
  inline void set_kernel_time_micros(::google::protobuf::uint64 value);
  
  // optional uint64 wall_time_micros = 3;
  inline bool has_wall_time_micros() const;
  inline void clear_wall_time_micros();
  static const int kWallTimeMicrosFieldNumber = 3;
  inline ::google::protobuf::uint64 wall_time_micros() const;
  inline void set_wall_time_micros(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:contester.proto.ExecutionResultTime)
 private:
  inline void set_has_user_time_micros();
  inline void clear_has_user_time_micros();
  inline void set_has_kernel_time_micros();
  inline void clear_has_kernel_time_micros();
  inline void set_has_wall_time_micros();
  inline void clear_has_wall_time_micros();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_time_micros_;
  ::google::protobuf::uint64 kernel_time_micros_;
  ::google::protobuf::uint64 wall_time_micros_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();
  friend void protobuf_AssignDesc_contester_2fproto_2fExecutionProto_2eproto();
  friend void protobuf_ShutdownFile_contester_2fproto_2fExecutionProto_2eproto();
  
  void InitAsDefaultInstance();
  static ExecutionResultTime* default_instance_;
};
// ===================================================================


// ===================================================================

// RedirectParameters

// optional string filename = 1;
inline bool RedirectParameters::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedirectParameters::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedirectParameters::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedirectParameters::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& RedirectParameters::filename() const {
  return *filename_;
}
inline void RedirectParameters::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void RedirectParameters::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void RedirectParameters::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedirectParameters::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* RedirectParameters::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool memory = 2;
inline bool RedirectParameters::has_memory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedirectParameters::set_has_memory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedirectParameters::clear_has_memory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedirectParameters::clear_memory() {
  memory_ = false;
  clear_has_memory();
}
inline bool RedirectParameters::memory() const {
  return memory_;
}
inline void RedirectParameters::set_memory(bool value) {
  set_has_memory();
  memory_ = value;
}

// optional .contester.proto.Blob buffer = 3;
inline bool RedirectParameters::has_buffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedirectParameters::set_has_buffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedirectParameters::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedirectParameters::clear_buffer() {
  if (buffer_ != NULL) buffer_->::contester::proto::Blob::Clear();
  clear_has_buffer();
}
inline const ::contester::proto::Blob& RedirectParameters::buffer() const {
  return buffer_ != NULL ? *buffer_ : *default_instance_->buffer_;
}
inline ::contester::proto::Blob* RedirectParameters::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) buffer_ = new ::contester::proto::Blob;
  return buffer_;
}
inline ::contester::proto::Blob* RedirectParameters::release_buffer() {
  clear_has_buffer();
  ::contester::proto::Blob* temp = buffer_;
  buffer_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ExecutionResultFlags

// optional bool killed = 1;
inline bool ExecutionResultFlags::has_killed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionResultFlags::set_has_killed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionResultFlags::clear_has_killed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionResultFlags::clear_killed() {
  killed_ = false;
  clear_has_killed();
}
inline bool ExecutionResultFlags::killed() const {
  return killed_;
}
inline void ExecutionResultFlags::set_killed(bool value) {
  set_has_killed();
  killed_ = value;
}

// optional bool time_limit_hit = 2;
inline bool ExecutionResultFlags::has_time_limit_hit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecutionResultFlags::set_has_time_limit_hit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecutionResultFlags::clear_has_time_limit_hit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecutionResultFlags::clear_time_limit_hit() {
  time_limit_hit_ = false;
  clear_has_time_limit_hit();
}
inline bool ExecutionResultFlags::time_limit_hit() const {
  return time_limit_hit_;
}
inline void ExecutionResultFlags::set_time_limit_hit(bool value) {
  set_has_time_limit_hit();
  time_limit_hit_ = value;
}

// optional bool memory_limit_hit = 3;
inline bool ExecutionResultFlags::has_memory_limit_hit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecutionResultFlags::set_has_memory_limit_hit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecutionResultFlags::clear_has_memory_limit_hit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecutionResultFlags::clear_memory_limit_hit() {
  memory_limit_hit_ = false;
  clear_has_memory_limit_hit();
}
inline bool ExecutionResultFlags::memory_limit_hit() const {
  return memory_limit_hit_;
}
inline void ExecutionResultFlags::set_memory_limit_hit(bool value) {
  set_has_memory_limit_hit();
  memory_limit_hit_ = value;
}

// optional bool inactive = 4;
inline bool ExecutionResultFlags::has_inactive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecutionResultFlags::set_has_inactive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecutionResultFlags::clear_has_inactive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecutionResultFlags::clear_inactive() {
  inactive_ = false;
  clear_has_inactive();
}
inline bool ExecutionResultFlags::inactive() const {
  return inactive_;
}
inline void ExecutionResultFlags::set_inactive(bool value) {
  set_has_inactive();
  inactive_ = value;
}

// optional bool time_limit_hard = 5;
inline bool ExecutionResultFlags::has_time_limit_hard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExecutionResultFlags::set_has_time_limit_hard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExecutionResultFlags::clear_has_time_limit_hard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExecutionResultFlags::clear_time_limit_hard() {
  time_limit_hard_ = false;
  clear_has_time_limit_hard();
}
inline bool ExecutionResultFlags::time_limit_hard() const {
  return time_limit_hard_;
}
inline void ExecutionResultFlags::set_time_limit_hard(bool value) {
  set_has_time_limit_hard();
  time_limit_hard_ = value;
}

// optional bool stdout_overflow = 6;
inline bool ExecutionResultFlags::has_stdout_overflow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExecutionResultFlags::set_has_stdout_overflow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExecutionResultFlags::clear_has_stdout_overflow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExecutionResultFlags::clear_stdout_overflow() {
  stdout_overflow_ = false;
  clear_has_stdout_overflow();
}
inline bool ExecutionResultFlags::stdout_overflow() const {
  return stdout_overflow_;
}
inline void ExecutionResultFlags::set_stdout_overflow(bool value) {
  set_has_stdout_overflow();
  stdout_overflow_ = value;
}

// optional bool stderr_overflow = 7;
inline bool ExecutionResultFlags::has_stderr_overflow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExecutionResultFlags::set_has_stderr_overflow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExecutionResultFlags::clear_has_stderr_overflow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExecutionResultFlags::clear_stderr_overflow() {
  stderr_overflow_ = false;
  clear_has_stderr_overflow();
}
inline bool ExecutionResultFlags::stderr_overflow() const {
  return stderr_overflow_;
}
inline void ExecutionResultFlags::set_stderr_overflow(bool value) {
  set_has_stderr_overflow();
  stderr_overflow_ = value;
}

// optional bool stdpipe_timeout = 8;
inline bool ExecutionResultFlags::has_stdpipe_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExecutionResultFlags::set_has_stdpipe_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExecutionResultFlags::clear_has_stdpipe_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExecutionResultFlags::clear_stdpipe_timeout() {
  stdpipe_timeout_ = false;
  clear_has_stdpipe_timeout();
}
inline bool ExecutionResultFlags::stdpipe_timeout() const {
  return stdpipe_timeout_;
}
inline void ExecutionResultFlags::set_stdpipe_timeout(bool value) {
  set_has_stdpipe_timeout();
  stdpipe_timeout_ = value;
}

// optional bool time_limit_hit_post = 9;
inline bool ExecutionResultFlags::has_time_limit_hit_post() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExecutionResultFlags::set_has_time_limit_hit_post() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExecutionResultFlags::clear_has_time_limit_hit_post() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExecutionResultFlags::clear_time_limit_hit_post() {
  time_limit_hit_post_ = false;
  clear_has_time_limit_hit_post();
}
inline bool ExecutionResultFlags::time_limit_hit_post() const {
  return time_limit_hit_post_;
}
inline void ExecutionResultFlags::set_time_limit_hit_post(bool value) {
  set_has_time_limit_hit_post();
  time_limit_hit_post_ = value;
}

// optional bool memory_limit_hit_post = 10;
inline bool ExecutionResultFlags::has_memory_limit_hit_post() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ExecutionResultFlags::set_has_memory_limit_hit_post() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ExecutionResultFlags::clear_has_memory_limit_hit_post() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ExecutionResultFlags::clear_memory_limit_hit_post() {
  memory_limit_hit_post_ = false;
  clear_has_memory_limit_hit_post();
}
inline bool ExecutionResultFlags::memory_limit_hit_post() const {
  return memory_limit_hit_post_;
}
inline void ExecutionResultFlags::set_memory_limit_hit_post(bool value) {
  set_has_memory_limit_hit_post();
  memory_limit_hit_post_ = value;
}

// optional bool process_limit_hit = 11;
inline bool ExecutionResultFlags::has_process_limit_hit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ExecutionResultFlags::set_has_process_limit_hit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ExecutionResultFlags::clear_has_process_limit_hit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ExecutionResultFlags::clear_process_limit_hit() {
  process_limit_hit_ = false;
  clear_has_process_limit_hit();
}
inline bool ExecutionResultFlags::process_limit_hit() const {
  return process_limit_hit_;
}
inline void ExecutionResultFlags::set_process_limit_hit(bool value) {
  set_has_process_limit_hit();
  process_limit_hit_ = value;
}

// optional bool stopped_by_signal = 12;
inline bool ExecutionResultFlags::has_stopped_by_signal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ExecutionResultFlags::set_has_stopped_by_signal() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ExecutionResultFlags::clear_has_stopped_by_signal() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ExecutionResultFlags::clear_stopped_by_signal() {
  stopped_by_signal_ = false;
  clear_has_stopped_by_signal();
}
inline bool ExecutionResultFlags::stopped_by_signal() const {
  return stopped_by_signal_;
}
inline void ExecutionResultFlags::set_stopped_by_signal(bool value) {
  set_has_stopped_by_signal();
  stopped_by_signal_ = value;
}

// optional bool killed_by_signal = 13;
inline bool ExecutionResultFlags::has_killed_by_signal() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ExecutionResultFlags::set_has_killed_by_signal() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ExecutionResultFlags::clear_has_killed_by_signal() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ExecutionResultFlags::clear_killed_by_signal() {
  killed_by_signal_ = false;
  clear_has_killed_by_signal();
}
inline bool ExecutionResultFlags::killed_by_signal() const {
  return killed_by_signal_;
}
inline void ExecutionResultFlags::set_killed_by_signal(bool value) {
  set_has_killed_by_signal();
  killed_by_signal_ = value;
}

// -------------------------------------------------------------------

// ExecutionResultTime

// optional uint64 user_time_micros = 1;
inline bool ExecutionResultTime::has_user_time_micros() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecutionResultTime::set_has_user_time_micros() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecutionResultTime::clear_has_user_time_micros() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecutionResultTime::clear_user_time_micros() {
  user_time_micros_ = GOOGLE_ULONGLONG(0);
  clear_has_user_time_micros();
}
inline ::google::protobuf::uint64 ExecutionResultTime::user_time_micros() const {
  return user_time_micros_;
}
inline void ExecutionResultTime::set_user_time_micros(::google::protobuf::uint64 value) {
  set_has_user_time_micros();
  user_time_micros_ = value;
}

// optional uint64 kernel_time_micros = 2;
inline bool ExecutionResultTime::has_kernel_time_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecutionResultTime::set_has_kernel_time_micros() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecutionResultTime::clear_has_kernel_time_micros() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecutionResultTime::clear_kernel_time_micros() {
  kernel_time_micros_ = GOOGLE_ULONGLONG(0);
  clear_has_kernel_time_micros();
}
inline ::google::protobuf::uint64 ExecutionResultTime::kernel_time_micros() const {
  return kernel_time_micros_;
}
inline void ExecutionResultTime::set_kernel_time_micros(::google::protobuf::uint64 value) {
  set_has_kernel_time_micros();
  kernel_time_micros_ = value;
}

// optional uint64 wall_time_micros = 3;
inline bool ExecutionResultTime::has_wall_time_micros() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecutionResultTime::set_has_wall_time_micros() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecutionResultTime::clear_has_wall_time_micros() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecutionResultTime::clear_wall_time_micros() {
  wall_time_micros_ = GOOGLE_ULONGLONG(0);
  clear_has_wall_time_micros();
}
inline ::google::protobuf::uint64 ExecutionResultTime::wall_time_micros() const {
  return wall_time_micros_;
}
inline void ExecutionResultTime::set_wall_time_micros(::google::protobuf::uint64 value) {
  set_has_wall_time_micros();
  wall_time_micros_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace contester

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contester_2fproto_2fExecutionProto_2eproto__INCLUDED
