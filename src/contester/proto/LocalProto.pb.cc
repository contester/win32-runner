// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "contester/proto/LocalProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace contester {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LocalEnvironment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalEnvironment_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalEnvironment_Variable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalEnvironment_Variable_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalExecutionParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalExecutionParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalExecutionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalExecutionResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalExecution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalExecution_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_contester_2fproto_2fLocalProto_2eproto() {
  protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "contester/proto/LocalProto.proto");
  GOOGLE_CHECK(file != NULL);
  LocalEnvironment_descriptor_ = file->message_type(0);
  static const int LocalEnvironment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment, empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment, variable_),
  };
  LocalEnvironment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalEnvironment_descriptor_,
      LocalEnvironment::default_instance_,
      LocalEnvironment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalEnvironment));
  LocalEnvironment_Variable_descriptor_ = LocalEnvironment_descriptor_->nested_type(0);
  static const int LocalEnvironment_Variable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment_Variable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment_Variable, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment_Variable, expand_),
  };
  LocalEnvironment_Variable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalEnvironment_Variable_descriptor_,
      LocalEnvironment_Variable::default_instance_,
      LocalEnvironment_Variable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment_Variable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalEnvironment_Variable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalEnvironment_Variable));
  LoginInformation_descriptor_ = file->message_type(1);
  static const int LoginInformation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInformation, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInformation, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInformation, domain_),
  };
  LoginInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInformation_descriptor_,
      LoginInformation::default_instance_,
      LoginInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInformation));
  LocalExecutionParameters_descriptor_ = file->message_type(2);
  static const int LocalExecutionParameters_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, application_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, command_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, current_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, time_limit_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, memory_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, check_idleness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, restrict_ui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, no_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, process_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, time_limit_hard_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, login_information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, std_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, std_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, std_err_),
  };
  LocalExecutionParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalExecutionParameters_descriptor_,
      LocalExecutionParameters::default_instance_,
      LocalExecutionParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalExecutionParameters));
  LocalExecutionResult_descriptor_ = file->message_type(3);
  static const int LocalExecutionResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, std_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, std_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, total_processes_),
  };
  LocalExecutionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalExecutionResult_descriptor_,
      LocalExecutionResult::default_instance_,
      LocalExecutionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecutionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalExecutionResult));
  LocalExecution_descriptor_ = file->message_type(4);
  static const int LocalExecution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecution, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecution, result_),
  };
  LocalExecution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalExecution_descriptor_,
      LocalExecution::default_instance_,
      LocalExecution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalExecution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalExecution));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_contester_2fproto_2fLocalProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalEnvironment_descriptor_, &LocalEnvironment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalEnvironment_Variable_descriptor_, &LocalEnvironment_Variable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInformation_descriptor_, &LoginInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalExecutionParameters_descriptor_, &LocalExecutionParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalExecutionResult_descriptor_, &LocalExecutionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalExecution_descriptor_, &LocalExecution::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_contester_2fproto_2fLocalProto_2eproto() {
  delete LocalEnvironment::default_instance_;
  delete LocalEnvironment_reflection_;
  delete LocalEnvironment_Variable::default_instance_;
  delete LocalEnvironment_Variable_reflection_;
  delete LoginInformation::default_instance_;
  delete LoginInformation_reflection_;
  delete LocalExecutionParameters::default_instance_;
  delete LocalExecutionParameters_reflection_;
  delete LocalExecutionResult::default_instance_;
  delete LocalExecutionResult_reflection_;
  delete LocalExecution::default_instance_;
  delete LocalExecution_reflection_;
}

void protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::contester::proto::protobuf_AddDesc_contester_2fproto_2fBlobProto_2eproto();
  ::contester::proto::protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n contester/proto/LocalProto.proto\022\017cont"
    "ester.proto\032\037contester/proto/BlobProto.p"
    "roto\032$contester/proto/ExecutionProto.pro"
    "to\"\230\001\n\020LocalEnvironment\022\r\n\005empty\030\001 \001(\010\022<"
    "\n\010variable\030\002 \003(\0132*.contester.proto.Local"
    "Environment.Variable\0327\n\010Variable\022\014\n\004name"
    "\030\001 \002(\t\022\r\n\005value\030\002 \001(\t\022\016\n\006expand\030\003 \001(\010\"F\n"
    "\020LoginInformation\022\020\n\010username\030\001 \002(\t\022\020\n\010p"
    "assword\030\002 \002(\t\022\016\n\006domain\030\003 \001(\t\"\241\004\n\030LocalE"
    "xecutionParameters\022\030\n\020application_name\030\001"
    " \001(\t\022\024\n\014command_line\030\002 \001(\t\022\031\n\021current_di"
    "rectory\030\003 \001(\t\022\031\n\021time_limit_micros\030\004 \001(\004"
    "\022\024\n\014memory_limit\030\005 \001(\004\022\026\n\016check_idleness"
    "\030\006 \001(\010\0226\n\013environment\030\007 \001(\0132!.contester."
    "proto.LocalEnvironment\022\023\n\013restrict_ui\030\010 "
    "\001(\010\022\016\n\006no_job\030\t \001(\010\022\025\n\rprocess_limit\030\n \001"
    "(\r\022\036\n\026time_limit_hard_micros\030\017 \001(\004\022<\n\021lo"
    "gin_information\030\013 \001(\0132!.contester.proto."
    "LoginInformation\0223\n\006std_in\030\014 \001(\0132#.conte"
    "ster.proto.RedirectParameters\0224\n\007std_out"
    "\030\r \001(\0132#.contester.proto.RedirectParamet"
    "ers\0224\n\007std_err\030\016 \001(\0132#.contester.proto.R"
    "edirectParameters\"\216\002\n\024LocalExecutionResu"
    "lt\0224\n\005flags\030\001 \001(\0132%.contester.proto.Exec"
    "utionResultFlags\0222\n\004time\030\002 \001(\0132$.contest"
    "er.proto.ExecutionResultTime\022\016\n\006memory\030\003"
    " \001(\004\022\023\n\013return_code\030\004 \001(\r\022&\n\007std_out\030\005 \001"
    "(\0132\025.contester.proto.Blob\022&\n\007std_err\030\006 \001"
    "(\0132\025.contester.proto.Blob\022\027\n\017total_proce"
    "sses\030\007 \001(\004\"\206\001\n\016LocalExecution\022=\n\nparamet"
    "ers\030\001 \002(\0132).contester.proto.LocalExecuti"
    "onParameters\0225\n\006result\030\002 \001(\0132%.contester"
    ".proto.LocalExecutionResult", 1307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contester/proto/LocalProto.proto", &protobuf_RegisterTypes);
  LocalEnvironment::default_instance_ = new LocalEnvironment();
  LocalEnvironment_Variable::default_instance_ = new LocalEnvironment_Variable();
  LoginInformation::default_instance_ = new LoginInformation();
  LocalExecutionParameters::default_instance_ = new LocalExecutionParameters();
  LocalExecutionResult::default_instance_ = new LocalExecutionResult();
  LocalExecution::default_instance_ = new LocalExecution();
  LocalEnvironment::default_instance_->InitAsDefaultInstance();
  LocalEnvironment_Variable::default_instance_->InitAsDefaultInstance();
  LoginInformation::default_instance_->InitAsDefaultInstance();
  LocalExecutionParameters::default_instance_->InitAsDefaultInstance();
  LocalExecutionResult::default_instance_->InitAsDefaultInstance();
  LocalExecution::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_contester_2fproto_2fLocalProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_contester_2fproto_2fLocalProto_2eproto {
  StaticDescriptorInitializer_contester_2fproto_2fLocalProto_2eproto() {
    protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();
  }
} static_descriptor_initializer_contester_2fproto_2fLocalProto_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LocalEnvironment_Variable::kNameFieldNumber;
const int LocalEnvironment_Variable::kValueFieldNumber;
const int LocalEnvironment_Variable::kExpandFieldNumber;
#endif  // !_MSC_VER

LocalEnvironment_Variable::LocalEnvironment_Variable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalEnvironment_Variable::InitAsDefaultInstance() {
}

LocalEnvironment_Variable::LocalEnvironment_Variable(const LocalEnvironment_Variable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalEnvironment_Variable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expand_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalEnvironment_Variable::~LocalEnvironment_Variable() {
  SharedDtor();
}

void LocalEnvironment_Variable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void LocalEnvironment_Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalEnvironment_Variable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalEnvironment_Variable_descriptor_;
}

const LocalEnvironment_Variable& LocalEnvironment_Variable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();  return *default_instance_;
}

LocalEnvironment_Variable* LocalEnvironment_Variable::default_instance_ = NULL;

LocalEnvironment_Variable* LocalEnvironment_Variable::New() const {
  return new LocalEnvironment_Variable;
}

void LocalEnvironment_Variable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    expand_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalEnvironment_Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expand;
        break;
      }
      
      // optional bool expand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expand_)));
          set_has_expand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalEnvironment_Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // optional bool expand = 3;
  if (has_expand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->expand(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalEnvironment_Variable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // optional bool expand = 3;
  if (has_expand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->expand(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalEnvironment_Variable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional bool expand = 3;
    if (has_expand()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalEnvironment_Variable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalEnvironment_Variable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalEnvironment_Variable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalEnvironment_Variable::MergeFrom(const LocalEnvironment_Variable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_expand()) {
      set_expand(from.expand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalEnvironment_Variable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalEnvironment_Variable::CopyFrom(const LocalEnvironment_Variable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalEnvironment_Variable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LocalEnvironment_Variable::Swap(LocalEnvironment_Variable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(expand_, other->expand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalEnvironment_Variable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalEnvironment_Variable_descriptor_;
  metadata.reflection = LocalEnvironment_Variable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LocalEnvironment::kEmptyFieldNumber;
const int LocalEnvironment::kVariableFieldNumber;
#endif  // !_MSC_VER

LocalEnvironment::LocalEnvironment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalEnvironment::InitAsDefaultInstance() {
}

LocalEnvironment::LocalEnvironment(const LocalEnvironment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalEnvironment::SharedCtor() {
  _cached_size_ = 0;
  empty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalEnvironment::~LocalEnvironment() {
  SharedDtor();
}

void LocalEnvironment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocalEnvironment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalEnvironment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalEnvironment_descriptor_;
}

const LocalEnvironment& LocalEnvironment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();  return *default_instance_;
}

LocalEnvironment* LocalEnvironment::default_instance_ = NULL;

LocalEnvironment* LocalEnvironment::New() const {
  return new LocalEnvironment;
}

void LocalEnvironment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empty_ = false;
  }
  variable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool empty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        break;
      }
      
      // repeated .contester.proto.LocalEnvironment.Variable variable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool empty = 1;
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->empty(), output);
  }
  
  // repeated .contester.proto.LocalEnvironment.Variable variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalEnvironment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool empty = 1;
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->empty(), target);
  }
  
  // repeated .contester.proto.LocalEnvironment.Variable variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->variable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalEnvironment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool empty = 1;
    if (has_empty()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .contester.proto.LocalEnvironment.Variable variable = 2;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalEnvironment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalEnvironment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalEnvironment::MergeFrom(const LocalEnvironment& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_.MergeFrom(from.variable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty()) {
      set_empty(from.empty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalEnvironment::CopyFrom(const LocalEnvironment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalEnvironment::IsInitialized() const {
  
  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  return true;
}

void LocalEnvironment::Swap(LocalEnvironment* other) {
  if (other != this) {
    std::swap(empty_, other->empty_);
    variable_.Swap(&other->variable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalEnvironment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalEnvironment_descriptor_;
  metadata.reflection = LocalEnvironment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInformation::kUsernameFieldNumber;
const int LoginInformation::kPasswordFieldNumber;
const int LoginInformation::kDomainFieldNumber;
#endif  // !_MSC_VER

LoginInformation::LoginInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInformation::InitAsDefaultInstance() {
}

LoginInformation::LoginInformation(const LoginInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInformation::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInformation::~LoginInformation() {
  SharedDtor();
}

void LoginInformation::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void LoginInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInformation_descriptor_;
}

const LoginInformation& LoginInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();  return *default_instance_;
}

LoginInformation* LoginInformation::default_instance_ = NULL;

LoginInformation* LoginInformation::New() const {
  return new LoginInformation;
}

void LoginInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }
      
      // optional string domain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->domain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInformation::MergeFrom(const LoginInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInformation::CopyFrom(const LoginInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LoginInformation::Swap(LoginInformation* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInformation_descriptor_;
  metadata.reflection = LoginInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalExecutionParameters::kApplicationNameFieldNumber;
const int LocalExecutionParameters::kCommandLineFieldNumber;
const int LocalExecutionParameters::kCurrentDirectoryFieldNumber;
const int LocalExecutionParameters::kTimeLimitMicrosFieldNumber;
const int LocalExecutionParameters::kMemoryLimitFieldNumber;
const int LocalExecutionParameters::kCheckIdlenessFieldNumber;
const int LocalExecutionParameters::kEnvironmentFieldNumber;
const int LocalExecutionParameters::kRestrictUiFieldNumber;
const int LocalExecutionParameters::kNoJobFieldNumber;
const int LocalExecutionParameters::kProcessLimitFieldNumber;
const int LocalExecutionParameters::kTimeLimitHardMicrosFieldNumber;
const int LocalExecutionParameters::kLoginInformationFieldNumber;
const int LocalExecutionParameters::kStdInFieldNumber;
const int LocalExecutionParameters::kStdOutFieldNumber;
const int LocalExecutionParameters::kStdErrFieldNumber;
#endif  // !_MSC_VER

LocalExecutionParameters::LocalExecutionParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalExecutionParameters::InitAsDefaultInstance() {
  environment_ = const_cast< ::contester::proto::LocalEnvironment*>(&::contester::proto::LocalEnvironment::default_instance());
  login_information_ = const_cast< ::contester::proto::LoginInformation*>(&::contester::proto::LoginInformation::default_instance());
  std_in_ = const_cast< ::contester::proto::RedirectParameters*>(&::contester::proto::RedirectParameters::default_instance());
  std_out_ = const_cast< ::contester::proto::RedirectParameters*>(&::contester::proto::RedirectParameters::default_instance());
  std_err_ = const_cast< ::contester::proto::RedirectParameters*>(&::contester::proto::RedirectParameters::default_instance());
}

LocalExecutionParameters::LocalExecutionParameters(const LocalExecutionParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalExecutionParameters::SharedCtor() {
  _cached_size_ = 0;
  application_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  command_line_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  current_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_limit_micros_ = GOOGLE_ULONGLONG(0);
  memory_limit_ = GOOGLE_ULONGLONG(0);
  check_idleness_ = false;
  environment_ = NULL;
  restrict_ui_ = false;
  no_job_ = false;
  process_limit_ = 0u;
  time_limit_hard_micros_ = GOOGLE_ULONGLONG(0);
  login_information_ = NULL;
  std_in_ = NULL;
  std_out_ = NULL;
  std_err_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalExecutionParameters::~LocalExecutionParameters() {
  SharedDtor();
}

void LocalExecutionParameters::SharedDtor() {
  if (application_name_ != &::google::protobuf::internal::kEmptyString) {
    delete application_name_;
  }
  if (command_line_ != &::google::protobuf::internal::kEmptyString) {
    delete command_line_;
  }
  if (current_directory_ != &::google::protobuf::internal::kEmptyString) {
    delete current_directory_;
  }
  if (this != default_instance_) {
    delete environment_;
    delete login_information_;
    delete std_in_;
    delete std_out_;
    delete std_err_;
  }
}

void LocalExecutionParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalExecutionParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalExecutionParameters_descriptor_;
}

const LocalExecutionParameters& LocalExecutionParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();  return *default_instance_;
}

LocalExecutionParameters* LocalExecutionParameters::default_instance_ = NULL;

LocalExecutionParameters* LocalExecutionParameters::New() const {
  return new LocalExecutionParameters;
}

void LocalExecutionParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_application_name()) {
      if (application_name_ != &::google::protobuf::internal::kEmptyString) {
        application_name_->clear();
      }
    }
    if (has_command_line()) {
      if (command_line_ != &::google::protobuf::internal::kEmptyString) {
        command_line_->clear();
      }
    }
    if (has_current_directory()) {
      if (current_directory_ != &::google::protobuf::internal::kEmptyString) {
        current_directory_->clear();
      }
    }
    time_limit_micros_ = GOOGLE_ULONGLONG(0);
    memory_limit_ = GOOGLE_ULONGLONG(0);
    check_idleness_ = false;
    if (has_environment()) {
      if (environment_ != NULL) environment_->::contester::proto::LocalEnvironment::Clear();
    }
    restrict_ui_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    no_job_ = false;
    process_limit_ = 0u;
    time_limit_hard_micros_ = GOOGLE_ULONGLONG(0);
    if (has_login_information()) {
      if (login_information_ != NULL) login_information_->::contester::proto::LoginInformation::Clear();
    }
    if (has_std_in()) {
      if (std_in_ != NULL) std_in_->::contester::proto::RedirectParameters::Clear();
    }
    if (has_std_out()) {
      if (std_out_ != NULL) std_out_->::contester::proto::RedirectParameters::Clear();
    }
    if (has_std_err()) {
      if (std_err_ != NULL) std_err_->::contester::proto::RedirectParameters::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalExecutionParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string application_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application_name().data(), this->application_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_line;
        break;
      }
      
      // optional string command_line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_line().data(), this->command_line().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_current_directory;
        break;
      }
      
      // optional string current_directory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->current_directory().data(), this->current_directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_limit_micros;
        break;
      }
      
      // optional uint64 time_limit_micros = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_limit_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_limit_micros_)));
          set_has_time_limit_micros();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memory_limit;
        break;
      }
      
      // optional uint64 memory_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_limit_)));
          set_has_memory_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_check_idleness;
        break;
      }
      
      // optional bool check_idleness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_idleness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_idleness_)));
          set_has_check_idleness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_environment;
        break;
      }
      
      // optional .contester.proto.LocalEnvironment environment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_restrict_ui;
        break;
      }
      
      // optional bool restrict_ui = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restrict_ui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restrict_ui_)));
          set_has_restrict_ui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_no_job;
        break;
      }
      
      // optional bool no_job = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_job_)));
          set_has_no_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_process_limit;
        break;
      }
      
      // optional uint32 process_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_limit_)));
          set_has_process_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_login_information;
        break;
      }
      
      // optional .contester.proto.LoginInformation login_information = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_information()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_std_in;
        break;
      }
      
      // optional .contester.proto.RedirectParameters std_in = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_std_in()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_std_out;
        break;
      }
      
      // optional .contester.proto.RedirectParameters std_out = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_std_out()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_std_err;
        break;
      }
      
      // optional .contester.proto.RedirectParameters std_err = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_std_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_time_limit_hard_micros;
        break;
      }
      
      // optional uint64 time_limit_hard_micros = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_limit_hard_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_limit_hard_micros_)));
          set_has_time_limit_hard_micros();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalExecutionParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string application_name = 1;
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->application_name(), output);
  }
  
  // optional string command_line = 2;
  if (has_command_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_line().data(), this->command_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command_line(), output);
  }
  
  // optional string current_directory = 3;
  if (has_current_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_directory().data(), this->current_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->current_directory(), output);
  }
  
  // optional uint64 time_limit_micros = 4;
  if (has_time_limit_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_limit_micros(), output);
  }
  
  // optional uint64 memory_limit = 5;
  if (has_memory_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->memory_limit(), output);
  }
  
  // optional bool check_idleness = 6;
  if (has_check_idleness()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->check_idleness(), output);
  }
  
  // optional .contester.proto.LocalEnvironment environment = 7;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->environment(), output);
  }
  
  // optional bool restrict_ui = 8;
  if (has_restrict_ui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->restrict_ui(), output);
  }
  
  // optional bool no_job = 9;
  if (has_no_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->no_job(), output);
  }
  
  // optional uint32 process_limit = 10;
  if (has_process_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->process_limit(), output);
  }
  
  // optional .contester.proto.LoginInformation login_information = 11;
  if (has_login_information()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->login_information(), output);
  }
  
  // optional .contester.proto.RedirectParameters std_in = 12;
  if (has_std_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->std_in(), output);
  }
  
  // optional .contester.proto.RedirectParameters std_out = 13;
  if (has_std_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->std_out(), output);
  }
  
  // optional .contester.proto.RedirectParameters std_err = 14;
  if (has_std_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->std_err(), output);
  }
  
  // optional uint64 time_limit_hard_micros = 15;
  if (has_time_limit_hard_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->time_limit_hard_micros(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalExecutionParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string application_name = 1;
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application_name(), target);
  }
  
  // optional string command_line = 2;
  if (has_command_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_line().data(), this->command_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command_line(), target);
  }
  
  // optional string current_directory = 3;
  if (has_current_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_directory().data(), this->current_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->current_directory(), target);
  }
  
  // optional uint64 time_limit_micros = 4;
  if (has_time_limit_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_limit_micros(), target);
  }
  
  // optional uint64 memory_limit = 5;
  if (has_memory_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->memory_limit(), target);
  }
  
  // optional bool check_idleness = 6;
  if (has_check_idleness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->check_idleness(), target);
  }
  
  // optional .contester.proto.LocalEnvironment environment = 7;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->environment(), target);
  }
  
  // optional bool restrict_ui = 8;
  if (has_restrict_ui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->restrict_ui(), target);
  }
  
  // optional bool no_job = 9;
  if (has_no_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->no_job(), target);
  }
  
  // optional uint32 process_limit = 10;
  if (has_process_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->process_limit(), target);
  }
  
  // optional .contester.proto.LoginInformation login_information = 11;
  if (has_login_information()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->login_information(), target);
  }
  
  // optional .contester.proto.RedirectParameters std_in = 12;
  if (has_std_in()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->std_in(), target);
  }
  
  // optional .contester.proto.RedirectParameters std_out = 13;
  if (has_std_out()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->std_out(), target);
  }
  
  // optional .contester.proto.RedirectParameters std_err = 14;
  if (has_std_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->std_err(), target);
  }
  
  // optional uint64 time_limit_hard_micros = 15;
  if (has_time_limit_hard_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->time_limit_hard_micros(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalExecutionParameters::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string application_name = 1;
    if (has_application_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_name());
    }
    
    // optional string command_line = 2;
    if (has_command_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_line());
    }
    
    // optional string current_directory = 3;
    if (has_current_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_directory());
    }
    
    // optional uint64 time_limit_micros = 4;
    if (has_time_limit_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_limit_micros());
    }
    
    // optional uint64 memory_limit = 5;
    if (has_memory_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memory_limit());
    }
    
    // optional bool check_idleness = 6;
    if (has_check_idleness()) {
      total_size += 1 + 1;
    }
    
    // optional .contester.proto.LocalEnvironment environment = 7;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->environment());
    }
    
    // optional bool restrict_ui = 8;
    if (has_restrict_ui()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool no_job = 9;
    if (has_no_job()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 process_limit = 10;
    if (has_process_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_limit());
    }
    
    // optional uint64 time_limit_hard_micros = 15;
    if (has_time_limit_hard_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_limit_hard_micros());
    }
    
    // optional .contester.proto.LoginInformation login_information = 11;
    if (has_login_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_information());
    }
    
    // optional .contester.proto.RedirectParameters std_in = 12;
    if (has_std_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->std_in());
    }
    
    // optional .contester.proto.RedirectParameters std_out = 13;
    if (has_std_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->std_out());
    }
    
    // optional .contester.proto.RedirectParameters std_err = 14;
    if (has_std_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->std_err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalExecutionParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalExecutionParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalExecutionParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalExecutionParameters::MergeFrom(const LocalExecutionParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_name()) {
      set_application_name(from.application_name());
    }
    if (from.has_command_line()) {
      set_command_line(from.command_line());
    }
    if (from.has_current_directory()) {
      set_current_directory(from.current_directory());
    }
    if (from.has_time_limit_micros()) {
      set_time_limit_micros(from.time_limit_micros());
    }
    if (from.has_memory_limit()) {
      set_memory_limit(from.memory_limit());
    }
    if (from.has_check_idleness()) {
      set_check_idleness(from.check_idleness());
    }
    if (from.has_environment()) {
      mutable_environment()->::contester::proto::LocalEnvironment::MergeFrom(from.environment());
    }
    if (from.has_restrict_ui()) {
      set_restrict_ui(from.restrict_ui());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_no_job()) {
      set_no_job(from.no_job());
    }
    if (from.has_process_limit()) {
      set_process_limit(from.process_limit());
    }
    if (from.has_time_limit_hard_micros()) {
      set_time_limit_hard_micros(from.time_limit_hard_micros());
    }
    if (from.has_login_information()) {
      mutable_login_information()->::contester::proto::LoginInformation::MergeFrom(from.login_information());
    }
    if (from.has_std_in()) {
      mutable_std_in()->::contester::proto::RedirectParameters::MergeFrom(from.std_in());
    }
    if (from.has_std_out()) {
      mutable_std_out()->::contester::proto::RedirectParameters::MergeFrom(from.std_out());
    }
    if (from.has_std_err()) {
      mutable_std_err()->::contester::proto::RedirectParameters::MergeFrom(from.std_err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalExecutionParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalExecutionParameters::CopyFrom(const LocalExecutionParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalExecutionParameters::IsInitialized() const {
  
  if (has_environment()) {
    if (!this->environment().IsInitialized()) return false;
  }
  if (has_login_information()) {
    if (!this->login_information().IsInitialized()) return false;
  }
  return true;
}

void LocalExecutionParameters::Swap(LocalExecutionParameters* other) {
  if (other != this) {
    std::swap(application_name_, other->application_name_);
    std::swap(command_line_, other->command_line_);
    std::swap(current_directory_, other->current_directory_);
    std::swap(time_limit_micros_, other->time_limit_micros_);
    std::swap(memory_limit_, other->memory_limit_);
    std::swap(check_idleness_, other->check_idleness_);
    std::swap(environment_, other->environment_);
    std::swap(restrict_ui_, other->restrict_ui_);
    std::swap(no_job_, other->no_job_);
    std::swap(process_limit_, other->process_limit_);
    std::swap(time_limit_hard_micros_, other->time_limit_hard_micros_);
    std::swap(login_information_, other->login_information_);
    std::swap(std_in_, other->std_in_);
    std::swap(std_out_, other->std_out_);
    std::swap(std_err_, other->std_err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalExecutionParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalExecutionParameters_descriptor_;
  metadata.reflection = LocalExecutionParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalExecutionResult::kFlagsFieldNumber;
const int LocalExecutionResult::kTimeFieldNumber;
const int LocalExecutionResult::kMemoryFieldNumber;
const int LocalExecutionResult::kReturnCodeFieldNumber;
const int LocalExecutionResult::kStdOutFieldNumber;
const int LocalExecutionResult::kStdErrFieldNumber;
const int LocalExecutionResult::kTotalProcessesFieldNumber;
#endif  // !_MSC_VER

LocalExecutionResult::LocalExecutionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalExecutionResult::InitAsDefaultInstance() {
  flags_ = const_cast< ::contester::proto::ExecutionResultFlags*>(&::contester::proto::ExecutionResultFlags::default_instance());
  time_ = const_cast< ::contester::proto::ExecutionResultTime*>(&::contester::proto::ExecutionResultTime::default_instance());
  std_out_ = const_cast< ::contester::proto::Blob*>(&::contester::proto::Blob::default_instance());
  std_err_ = const_cast< ::contester::proto::Blob*>(&::contester::proto::Blob::default_instance());
}

LocalExecutionResult::LocalExecutionResult(const LocalExecutionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalExecutionResult::SharedCtor() {
  _cached_size_ = 0;
  flags_ = NULL;
  time_ = NULL;
  memory_ = GOOGLE_ULONGLONG(0);
  return_code_ = 0u;
  std_out_ = NULL;
  std_err_ = NULL;
  total_processes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalExecutionResult::~LocalExecutionResult() {
  SharedDtor();
}

void LocalExecutionResult::SharedDtor() {
  if (this != default_instance_) {
    delete flags_;
    delete time_;
    delete std_out_;
    delete std_err_;
  }
}

void LocalExecutionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalExecutionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalExecutionResult_descriptor_;
}

const LocalExecutionResult& LocalExecutionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();  return *default_instance_;
}

LocalExecutionResult* LocalExecutionResult::default_instance_ = NULL;

LocalExecutionResult* LocalExecutionResult::New() const {
  return new LocalExecutionResult;
}

void LocalExecutionResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flags()) {
      if (flags_ != NULL) flags_->::contester::proto::ExecutionResultFlags::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::contester::proto::ExecutionResultTime::Clear();
    }
    memory_ = GOOGLE_ULONGLONG(0);
    return_code_ = 0u;
    if (has_std_out()) {
      if (std_out_ != NULL) std_out_->::contester::proto::Blob::Clear();
    }
    if (has_std_err()) {
      if (std_err_ != NULL) std_err_->::contester::proto::Blob::Clear();
    }
    total_processes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalExecutionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contester.proto.ExecutionResultFlags flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }
      
      // optional .contester.proto.ExecutionResultTime time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memory;
        break;
      }
      
      // optional uint64 memory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_return_code;
        break;
      }
      
      // optional uint32 return_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &return_code_)));
          set_has_return_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_std_out;
        break;
      }
      
      // optional .contester.proto.Blob std_out = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_std_out()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_std_err;
        break;
      }
      
      // optional .contester.proto.Blob std_err = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_std_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_processes;
        break;
      }
      
      // optional uint64 total_processes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_processes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_processes_)));
          set_has_total_processes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalExecutionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .contester.proto.ExecutionResultFlags flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flags(), output);
  }
  
  // optional .contester.proto.ExecutionResultTime time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time(), output);
  }
  
  // optional uint64 memory = 3;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->memory(), output);
  }
  
  // optional uint32 return_code = 4;
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->return_code(), output);
  }
  
  // optional .contester.proto.Blob std_out = 5;
  if (has_std_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->std_out(), output);
  }
  
  // optional .contester.proto.Blob std_err = 6;
  if (has_std_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->std_err(), output);
  }
  
  // optional uint64 total_processes = 7;
  if (has_total_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total_processes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalExecutionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .contester.proto.ExecutionResultFlags flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flags(), target);
  }
  
  // optional .contester.proto.ExecutionResultTime time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->time(), target);
  }
  
  // optional uint64 memory = 3;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->memory(), target);
  }
  
  // optional uint32 return_code = 4;
  if (has_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->return_code(), target);
  }
  
  // optional .contester.proto.Blob std_out = 5;
  if (has_std_out()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->std_out(), target);
  }
  
  // optional .contester.proto.Blob std_err = 6;
  if (has_std_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->std_err(), target);
  }
  
  // optional uint64 total_processes = 7;
  if (has_total_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_processes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalExecutionResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .contester.proto.ExecutionResultFlags flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flags());
    }
    
    // optional .contester.proto.ExecutionResultTime time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }
    
    // optional uint64 memory = 3;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memory());
    }
    
    // optional uint32 return_code = 4;
    if (has_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->return_code());
    }
    
    // optional .contester.proto.Blob std_out = 5;
    if (has_std_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->std_out());
    }
    
    // optional .contester.proto.Blob std_err = 6;
    if (has_std_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->std_err());
    }
    
    // optional uint64 total_processes = 7;
    if (has_total_processes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_processes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalExecutionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalExecutionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalExecutionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalExecutionResult::MergeFrom(const LocalExecutionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      mutable_flags()->::contester::proto::ExecutionResultFlags::MergeFrom(from.flags());
    }
    if (from.has_time()) {
      mutable_time()->::contester::proto::ExecutionResultTime::MergeFrom(from.time());
    }
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_return_code()) {
      set_return_code(from.return_code());
    }
    if (from.has_std_out()) {
      mutable_std_out()->::contester::proto::Blob::MergeFrom(from.std_out());
    }
    if (from.has_std_err()) {
      mutable_std_err()->::contester::proto::Blob::MergeFrom(from.std_err());
    }
    if (from.has_total_processes()) {
      set_total_processes(from.total_processes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalExecutionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalExecutionResult::CopyFrom(const LocalExecutionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalExecutionResult::IsInitialized() const {
  
  return true;
}

void LocalExecutionResult::Swap(LocalExecutionResult* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    std::swap(time_, other->time_);
    std::swap(memory_, other->memory_);
    std::swap(return_code_, other->return_code_);
    std::swap(std_out_, other->std_out_);
    std::swap(std_err_, other->std_err_);
    std::swap(total_processes_, other->total_processes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalExecutionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalExecutionResult_descriptor_;
  metadata.reflection = LocalExecutionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalExecution::kParametersFieldNumber;
const int LocalExecution::kResultFieldNumber;
#endif  // !_MSC_VER

LocalExecution::LocalExecution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalExecution::InitAsDefaultInstance() {
  parameters_ = const_cast< ::contester::proto::LocalExecutionParameters*>(&::contester::proto::LocalExecutionParameters::default_instance());
  result_ = const_cast< ::contester::proto::LocalExecutionResult*>(&::contester::proto::LocalExecutionResult::default_instance());
}

LocalExecution::LocalExecution(const LocalExecution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalExecution::SharedCtor() {
  _cached_size_ = 0;
  parameters_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalExecution::~LocalExecution() {
  SharedDtor();
}

void LocalExecution::SharedDtor() {
  if (this != default_instance_) {
    delete parameters_;
    delete result_;
  }
}

void LocalExecution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalExecution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalExecution_descriptor_;
}

const LocalExecution& LocalExecution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fLocalProto_2eproto();  return *default_instance_;
}

LocalExecution* LocalExecution::default_instance_ = NULL;

LocalExecution* LocalExecution::New() const {
  return new LocalExecution;
}

void LocalExecution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parameters()) {
      if (parameters_ != NULL) parameters_->::contester::proto::LocalExecutionParameters::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::contester::proto::LocalExecutionResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .contester.proto.LocalExecutionParameters parameters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }
      
      // optional .contester.proto.LocalExecutionResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .contester.proto.LocalExecutionParameters parameters = 1;
  if (has_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parameters(), output);
  }
  
  // optional .contester.proto.LocalExecutionResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalExecution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .contester.proto.LocalExecutionParameters parameters = 1;
  if (has_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parameters(), target);
  }
  
  // optional .contester.proto.LocalExecutionResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalExecution::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .contester.proto.LocalExecutionParameters parameters = 1;
    if (has_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameters());
    }
    
    // optional .contester.proto.LocalExecutionResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalExecution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalExecution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalExecution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalExecution::MergeFrom(const LocalExecution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parameters()) {
      mutable_parameters()->::contester::proto::LocalExecutionParameters::MergeFrom(from.parameters());
    }
    if (from.has_result()) {
      mutable_result()->::contester::proto::LocalExecutionResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalExecution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalExecution::CopyFrom(const LocalExecution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalExecution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_parameters()) {
    if (!this->parameters().IsInitialized()) return false;
  }
  return true;
}

void LocalExecution::Swap(LocalExecution* other) {
  if (other != this) {
    std::swap(parameters_, other->parameters_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalExecution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalExecution_descriptor_;
  metadata.reflection = LocalExecution_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace contester

// @@protoc_insertion_point(global_scope)
