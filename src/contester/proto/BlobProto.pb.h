// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contester/proto/BlobProto.proto

#ifndef PROTOBUF_contester_2fproto_2fBlobProto_2eproto__INCLUDED
#define PROTOBUF_contester_2fproto_2fBlobProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace contester {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_contester_2fproto_2fBlobProto_2eproto();
void protobuf_AssignDesc_contester_2fproto_2fBlobProto_2eproto();
void protobuf_ShutdownFile_contester_2fproto_2fBlobProto_2eproto();

class Blob;
class Blob_CompressionInfo;
class File;

enum Blob_CompressionInfo_CompressionType {
  Blob_CompressionInfo_CompressionType_METHOD_NONE = 0,
  Blob_CompressionInfo_CompressionType_METHOD_ZLIB = 1
};
bool Blob_CompressionInfo_CompressionType_IsValid(int value);
const Blob_CompressionInfo_CompressionType Blob_CompressionInfo_CompressionType_CompressionType_MIN = Blob_CompressionInfo_CompressionType_METHOD_NONE;
const Blob_CompressionInfo_CompressionType Blob_CompressionInfo_CompressionType_CompressionType_MAX = Blob_CompressionInfo_CompressionType_METHOD_ZLIB;
const int Blob_CompressionInfo_CompressionType_CompressionType_ARRAYSIZE = Blob_CompressionInfo_CompressionType_CompressionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Blob_CompressionInfo_CompressionType_descriptor();
inline const ::std::string& Blob_CompressionInfo_CompressionType_Name(Blob_CompressionInfo_CompressionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Blob_CompressionInfo_CompressionType_descriptor(), value);
}
inline bool Blob_CompressionInfo_CompressionType_Parse(
    const ::std::string& name, Blob_CompressionInfo_CompressionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Blob_CompressionInfo_CompressionType>(
    Blob_CompressionInfo_CompressionType_descriptor(), name, value);
}
// ===================================================================

class Blob_CompressionInfo : public ::google::protobuf::Message {
 public:
  Blob_CompressionInfo();
  virtual ~Blob_CompressionInfo();
  
  Blob_CompressionInfo(const Blob_CompressionInfo& from);
  
  inline Blob_CompressionInfo& operator=(const Blob_CompressionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Blob_CompressionInfo& default_instance();
  
  void Swap(Blob_CompressionInfo* other);
  
  // implements Message ----------------------------------------------
  
  Blob_CompressionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Blob_CompressionInfo& from);
  void MergeFrom(const Blob_CompressionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Blob_CompressionInfo_CompressionType CompressionType;
  static const CompressionType METHOD_NONE = Blob_CompressionInfo_CompressionType_METHOD_NONE;
  static const CompressionType METHOD_ZLIB = Blob_CompressionInfo_CompressionType_METHOD_ZLIB;
  static inline bool CompressionType_IsValid(int value) {
    return Blob_CompressionInfo_CompressionType_IsValid(value);
  }
  static const CompressionType CompressionType_MIN =
    Blob_CompressionInfo_CompressionType_CompressionType_MIN;
  static const CompressionType CompressionType_MAX =
    Blob_CompressionInfo_CompressionType_CompressionType_MAX;
  static const int CompressionType_ARRAYSIZE =
    Blob_CompressionInfo_CompressionType_CompressionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompressionType_descriptor() {
    return Blob_CompressionInfo_CompressionType_descriptor();
  }
  static inline const ::std::string& CompressionType_Name(CompressionType value) {
    return Blob_CompressionInfo_CompressionType_Name(value);
  }
  static inline bool CompressionType_Parse(const ::std::string& name,
      CompressionType* value) {
    return Blob_CompressionInfo_CompressionType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .contester.proto.Blob.CompressionInfo.CompressionType method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline ::contester::proto::Blob_CompressionInfo_CompressionType method() const;
  inline void set_method(::contester::proto::Blob_CompressionInfo_CompressionType value);
  
  // optional uint32 original_size = 2;
  inline bool has_original_size() const;
  inline void clear_original_size();
  static const int kOriginalSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 original_size() const;
  inline void set_original_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:contester.proto.Blob.CompressionInfo)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_original_size();
  inline void clear_has_original_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int method_;
  ::google::protobuf::uint32 original_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_contester_2fproto_2fBlobProto_2eproto();
  friend void protobuf_AssignDesc_contester_2fproto_2fBlobProto_2eproto();
  friend void protobuf_ShutdownFile_contester_2fproto_2fBlobProto_2eproto();
  
  void InitAsDefaultInstance();
  static Blob_CompressionInfo* default_instance_;
};
// -------------------------------------------------------------------

class Blob : public ::google::protobuf::Message {
 public:
  Blob();
  virtual ~Blob();
  
  Blob(const Blob& from);
  
  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Blob& default_instance();
  
  void Swap(Blob* other);
  
  // implements Message ----------------------------------------------
  
  Blob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Blob& from);
  void MergeFrom(const Blob& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Blob_CompressionInfo CompressionInfo;
  
  // accessors -------------------------------------------------------
  
  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional .contester.proto.Blob.CompressionInfo compression = 2;
  inline bool has_compression() const;
  inline void clear_compression();
  static const int kCompressionFieldNumber = 2;
  inline const ::contester::proto::Blob_CompressionInfo& compression() const;
  inline ::contester::proto::Blob_CompressionInfo* mutable_compression();
  inline ::contester::proto::Blob_CompressionInfo* release_compression();
  
  // optional bytes sha1 = 3;
  inline bool has_sha1() const;
  inline void clear_sha1();
  static const int kSha1FieldNumber = 3;
  inline const ::std::string& sha1() const;
  inline void set_sha1(const ::std::string& value);
  inline void set_sha1(const char* value);
  inline void set_sha1(const void* value, size_t size);
  inline ::std::string* mutable_sha1();
  inline ::std::string* release_sha1();
  
  // @@protoc_insertion_point(class_scope:contester.proto.Blob)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_compression();
  inline void clear_has_compression();
  inline void set_has_sha1();
  inline void clear_has_sha1();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  ::contester::proto::Blob_CompressionInfo* compression_;
  ::std::string* sha1_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_contester_2fproto_2fBlobProto_2eproto();
  friend void protobuf_AssignDesc_contester_2fproto_2fBlobProto_2eproto();
  friend void protobuf_ShutdownFile_contester_2fproto_2fBlobProto_2eproto();
  
  void InitAsDefaultInstance();
  static Blob* default_instance_;
};
// -------------------------------------------------------------------

class File : public ::google::protobuf::Message {
 public:
  File();
  virtual ~File();
  
  File(const File& from);
  
  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();
  
  void Swap(File* other);
  
  // implements Message ----------------------------------------------
  
  File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .contester.proto.Blob data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::contester::proto::Blob& data() const;
  inline ::contester::proto::Blob* mutable_data();
  inline ::contester::proto::Blob* release_data();
  
  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // @@protoc_insertion_point(class_scope:contester.proto.File)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::contester::proto::Blob* data_;
  ::std::string* type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_contester_2fproto_2fBlobProto_2eproto();
  friend void protobuf_AssignDesc_contester_2fproto_2fBlobProto_2eproto();
  friend void protobuf_ShutdownFile_contester_2fproto_2fBlobProto_2eproto();
  
  void InitAsDefaultInstance();
  static File* default_instance_;
};
// ===================================================================


// ===================================================================

// Blob_CompressionInfo

// optional .contester.proto.Blob.CompressionInfo.CompressionType method = 1;
inline bool Blob_CompressionInfo::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Blob_CompressionInfo::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Blob_CompressionInfo::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Blob_CompressionInfo::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::contester::proto::Blob_CompressionInfo_CompressionType Blob_CompressionInfo::method() const {
  return static_cast< ::contester::proto::Blob_CompressionInfo_CompressionType >(method_);
}
inline void Blob_CompressionInfo::set_method(::contester::proto::Blob_CompressionInfo_CompressionType value) {
  GOOGLE_DCHECK(::contester::proto::Blob_CompressionInfo_CompressionType_IsValid(value));
  set_has_method();
  method_ = value;
}

// optional uint32 original_size = 2;
inline bool Blob_CompressionInfo::has_original_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Blob_CompressionInfo::set_has_original_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Blob_CompressionInfo::clear_has_original_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Blob_CompressionInfo::clear_original_size() {
  original_size_ = 0u;
  clear_has_original_size();
}
inline ::google::protobuf::uint32 Blob_CompressionInfo::original_size() const {
  return original_size_;
}
inline void Blob_CompressionInfo::set_original_size(::google::protobuf::uint32 value) {
  set_has_original_size();
  original_size_ = value;
}

// -------------------------------------------------------------------

// Blob

// optional bytes data = 1;
inline bool Blob::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Blob::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Blob::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Blob::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Blob::data() const {
  return *data_;
}
inline void Blob::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Blob::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Blob::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blob::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Blob::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .contester.proto.Blob.CompressionInfo compression = 2;
inline bool Blob::has_compression() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Blob::set_has_compression() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Blob::clear_has_compression() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Blob::clear_compression() {
  if (compression_ != NULL) compression_->::contester::proto::Blob_CompressionInfo::Clear();
  clear_has_compression();
}
inline const ::contester::proto::Blob_CompressionInfo& Blob::compression() const {
  return compression_ != NULL ? *compression_ : *default_instance_->compression_;
}
inline ::contester::proto::Blob_CompressionInfo* Blob::mutable_compression() {
  set_has_compression();
  if (compression_ == NULL) compression_ = new ::contester::proto::Blob_CompressionInfo;
  return compression_;
}
inline ::contester::proto::Blob_CompressionInfo* Blob::release_compression() {
  clear_has_compression();
  ::contester::proto::Blob_CompressionInfo* temp = compression_;
  compression_ = NULL;
  return temp;
}

// optional bytes sha1 = 3;
inline bool Blob::has_sha1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Blob::set_has_sha1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Blob::clear_has_sha1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Blob::clear_sha1() {
  if (sha1_ != &::google::protobuf::internal::kEmptyString) {
    sha1_->clear();
  }
  clear_has_sha1();
}
inline const ::std::string& Blob::sha1() const {
  return *sha1_;
}
inline void Blob::set_sha1(const ::std::string& value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::kEmptyString) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
}
inline void Blob::set_sha1(const char* value) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::kEmptyString) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(value);
}
inline void Blob::set_sha1(const void* value, size_t size) {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::kEmptyString) {
    sha1_ = new ::std::string;
  }
  sha1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blob::mutable_sha1() {
  set_has_sha1();
  if (sha1_ == &::google::protobuf::internal::kEmptyString) {
    sha1_ = new ::std::string;
  }
  return sha1_;
}
inline ::std::string* Blob::release_sha1() {
  clear_has_sha1();
  if (sha1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sha1_;
    sha1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// File

// required string name = 1;
inline bool File::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& File::name() const {
  return *name_;
}
inline void File::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void File::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* File::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .contester.proto.Blob data = 2;
inline bool File::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void File::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void File::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void File::clear_data() {
  if (data_ != NULL) data_->::contester::proto::Blob::Clear();
  clear_has_data();
}
inline const ::contester::proto::Blob& File::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::contester::proto::Blob* File::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::contester::proto::Blob;
  return data_;
}
inline ::contester::proto::Blob* File::release_data() {
  clear_has_data();
  ::contester::proto::Blob* temp = data_;
  data_ = NULL;
  return temp;
}

// required string type = 3;
inline bool File::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void File::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void File::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void File::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& File::type() const {
  return *type_;
}
inline void File::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void File::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void File::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* File::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* File::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace contester

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contester::proto::Blob_CompressionInfo_CompressionType>() {
  return ::contester::proto::Blob_CompressionInfo_CompressionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contester_2fproto_2fBlobProto_2eproto__INCLUDED
