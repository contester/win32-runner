// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "contester/proto/ExecutionProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace contester {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RedirectParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedirectParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionResultFlags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionResultFlags_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionResultTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionResultTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_contester_2fproto_2fExecutionProto_2eproto() {
  protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "contester/proto/ExecutionProto.proto");
  GOOGLE_CHECK(file != NULL);
  RedirectParameters_descriptor_ = file->message_type(0);
  static const int RedirectParameters_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectParameters, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectParameters, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectParameters, buffer_),
  };
  RedirectParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedirectParameters_descriptor_,
      RedirectParameters::default_instance_,
      RedirectParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedirectParameters));
  ExecutionResultFlags_descriptor_ = file->message_type(1);
  static const int ExecutionResultFlags_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, killed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, time_limit_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, memory_limit_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, inactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, time_limit_hard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, stdout_overflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, stderr_overflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, stdpipe_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, time_limit_hit_post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, memory_limit_hit_post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, process_limit_hit_),
  };
  ExecutionResultFlags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionResultFlags_descriptor_,
      ExecutionResultFlags::default_instance_,
      ExecutionResultFlags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultFlags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionResultFlags));
  ExecutionResultTime_descriptor_ = file->message_type(2);
  static const int ExecutionResultTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultTime, user_time_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultTime, kernel_time_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultTime, wall_time_micros_),
  };
  ExecutionResultTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionResultTime_descriptor_,
      ExecutionResultTime::default_instance_,
      ExecutionResultTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionResultTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionResultTime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_contester_2fproto_2fExecutionProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedirectParameters_descriptor_, &RedirectParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionResultFlags_descriptor_, &ExecutionResultFlags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionResultTime_descriptor_, &ExecutionResultTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_contester_2fproto_2fExecutionProto_2eproto() {
  delete RedirectParameters::default_instance_;
  delete RedirectParameters_reflection_;
  delete ExecutionResultFlags::default_instance_;
  delete ExecutionResultFlags_reflection_;
  delete ExecutionResultTime::default_instance_;
  delete ExecutionResultTime_reflection_;
}

void protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::contester::proto::protobuf_AddDesc_contester_2fproto_2fBlobProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$contester/proto/ExecutionProto.proto\022\017"
    "contester.proto\032\037contester/proto/BlobPro"
    "to.proto\"]\n\022RedirectParameters\022\020\n\010filena"
    "me\030\001 \001(\t\022\016\n\006memory\030\002 \001(\010\022%\n\006buffer\030\003 \001(\013"
    "2\025.contester.proto.Blob\"\245\002\n\024ExecutionRes"
    "ultFlags\022\016\n\006killed\030\001 \001(\010\022\026\n\016time_limit_h"
    "it\030\002 \001(\010\022\030\n\020memory_limit_hit\030\003 \001(\010\022\020\n\010in"
    "active\030\004 \001(\010\022\027\n\017time_limit_hard\030\005 \001(\010\022\027\n"
    "\017stdout_overflow\030\006 \001(\010\022\027\n\017stderr_overflo"
    "w\030\007 \001(\010\022\027\n\017stdpipe_timeout\030\010 \001(\010\022\033\n\023time"
    "_limit_hit_post\030\t \001(\010\022\035\n\025memory_limit_hi"
    "t_post\030\n \001(\010\022\031\n\021process_limit_hit\030\013 \001(\010\""
    "e\n\023ExecutionResultTime\022\030\n\020user_time_micr"
    "os\030\001 \001(\004\022\032\n\022kernel_time_micros\030\002 \001(\004\022\030\n\020"
    "wall_time_micros\030\003 \001(\004", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contester/proto/ExecutionProto.proto", &protobuf_RegisterTypes);
  RedirectParameters::default_instance_ = new RedirectParameters();
  ExecutionResultFlags::default_instance_ = new ExecutionResultFlags();
  ExecutionResultTime::default_instance_ = new ExecutionResultTime();
  RedirectParameters::default_instance_->InitAsDefaultInstance();
  ExecutionResultFlags::default_instance_->InitAsDefaultInstance();
  ExecutionResultTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_contester_2fproto_2fExecutionProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_contester_2fproto_2fExecutionProto_2eproto {
  StaticDescriptorInitializer_contester_2fproto_2fExecutionProto_2eproto() {
    protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();
  }
} static_descriptor_initializer_contester_2fproto_2fExecutionProto_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RedirectParameters::kFilenameFieldNumber;
const int RedirectParameters::kMemoryFieldNumber;
const int RedirectParameters::kBufferFieldNumber;
#endif  // !_MSC_VER

RedirectParameters::RedirectParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedirectParameters::InitAsDefaultInstance() {
  buffer_ = const_cast< ::contester::proto::Blob*>(&::contester::proto::Blob::default_instance());
}

RedirectParameters::RedirectParameters(const RedirectParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedirectParameters::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memory_ = false;
  buffer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedirectParameters::~RedirectParameters() {
  SharedDtor();
}

void RedirectParameters::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete buffer_;
  }
}

void RedirectParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedirectParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedirectParameters_descriptor_;
}

const RedirectParameters& RedirectParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();  return *default_instance_;
}

RedirectParameters* RedirectParameters::default_instance_ = NULL;

RedirectParameters* RedirectParameters::New() const {
  return new RedirectParameters;
}

void RedirectParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    memory_ = false;
    if (has_buffer()) {
      if (buffer_ != NULL) buffer_->::contester::proto::Blob::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedirectParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_memory;
        break;
      }
      
      // optional bool memory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buffer;
        break;
      }
      
      // optional .contester.proto.Blob buffer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedirectParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  // optional bool memory = 2;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->memory(), output);
  }
  
  // optional .contester.proto.Blob buffer = 3;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedirectParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  // optional bool memory = 2;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->memory(), target);
  }
  
  // optional .contester.proto.Blob buffer = 3;
  if (has_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedirectParameters::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional bool memory = 2;
    if (has_memory()) {
      total_size += 1 + 1;
    }
    
    // optional .contester.proto.Blob buffer = 3;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedirectParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedirectParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedirectParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedirectParameters::MergeFrom(const RedirectParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_buffer()) {
      mutable_buffer()->::contester::proto::Blob::MergeFrom(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedirectParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectParameters::CopyFrom(const RedirectParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectParameters::IsInitialized() const {
  
  return true;
}

void RedirectParameters::Swap(RedirectParameters* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(memory_, other->memory_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedirectParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedirectParameters_descriptor_;
  metadata.reflection = RedirectParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionResultFlags::kKilledFieldNumber;
const int ExecutionResultFlags::kTimeLimitHitFieldNumber;
const int ExecutionResultFlags::kMemoryLimitHitFieldNumber;
const int ExecutionResultFlags::kInactiveFieldNumber;
const int ExecutionResultFlags::kTimeLimitHardFieldNumber;
const int ExecutionResultFlags::kStdoutOverflowFieldNumber;
const int ExecutionResultFlags::kStderrOverflowFieldNumber;
const int ExecutionResultFlags::kStdpipeTimeoutFieldNumber;
const int ExecutionResultFlags::kTimeLimitHitPostFieldNumber;
const int ExecutionResultFlags::kMemoryLimitHitPostFieldNumber;
const int ExecutionResultFlags::kProcessLimitHitFieldNumber;
#endif  // !_MSC_VER

ExecutionResultFlags::ExecutionResultFlags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionResultFlags::InitAsDefaultInstance() {
}

ExecutionResultFlags::ExecutionResultFlags(const ExecutionResultFlags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionResultFlags::SharedCtor() {
  _cached_size_ = 0;
  killed_ = false;
  time_limit_hit_ = false;
  memory_limit_hit_ = false;
  inactive_ = false;
  time_limit_hard_ = false;
  stdout_overflow_ = false;
  stderr_overflow_ = false;
  stdpipe_timeout_ = false;
  time_limit_hit_post_ = false;
  memory_limit_hit_post_ = false;
  process_limit_hit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionResultFlags::~ExecutionResultFlags() {
  SharedDtor();
}

void ExecutionResultFlags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExecutionResultFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionResultFlags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionResultFlags_descriptor_;
}

const ExecutionResultFlags& ExecutionResultFlags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();  return *default_instance_;
}

ExecutionResultFlags* ExecutionResultFlags::default_instance_ = NULL;

ExecutionResultFlags* ExecutionResultFlags::New() const {
  return new ExecutionResultFlags;
}

void ExecutionResultFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    killed_ = false;
    time_limit_hit_ = false;
    memory_limit_hit_ = false;
    inactive_ = false;
    time_limit_hard_ = false;
    stdout_overflow_ = false;
    stderr_overflow_ = false;
    stdpipe_timeout_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_limit_hit_post_ = false;
    memory_limit_hit_post_ = false;
    process_limit_hit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionResultFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool killed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &killed_)));
          set_has_killed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_limit_hit;
        break;
      }
      
      // optional bool time_limit_hit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_limit_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &time_limit_hit_)));
          set_has_time_limit_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memory_limit_hit;
        break;
      }
      
      // optional bool memory_limit_hit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_limit_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &memory_limit_hit_)));
          set_has_memory_limit_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inactive;
        break;
      }
      
      // optional bool inactive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inactive_)));
          set_has_inactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_limit_hard;
        break;
      }
      
      // optional bool time_limit_hard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_limit_hard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &time_limit_hard_)));
          set_has_time_limit_hard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stdout_overflow;
        break;
      }
      
      // optional bool stdout_overflow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stdout_overflow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stdout_overflow_)));
          set_has_stdout_overflow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stderr_overflow;
        break;
      }
      
      // optional bool stderr_overflow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stderr_overflow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stderr_overflow_)));
          set_has_stderr_overflow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_stdpipe_timeout;
        break;
      }
      
      // optional bool stdpipe_timeout = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stdpipe_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stdpipe_timeout_)));
          set_has_stdpipe_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time_limit_hit_post;
        break;
      }
      
      // optional bool time_limit_hit_post = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_limit_hit_post:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &time_limit_hit_post_)));
          set_has_time_limit_hit_post();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_memory_limit_hit_post;
        break;
      }
      
      // optional bool memory_limit_hit_post = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_limit_hit_post:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &memory_limit_hit_post_)));
          set_has_memory_limit_hit_post();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_process_limit_hit;
        break;
      }
      
      // optional bool process_limit_hit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_limit_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &process_limit_hit_)));
          set_has_process_limit_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionResultFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool killed = 1;
  if (has_killed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->killed(), output);
  }
  
  // optional bool time_limit_hit = 2;
  if (has_time_limit_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->time_limit_hit(), output);
  }
  
  // optional bool memory_limit_hit = 3;
  if (has_memory_limit_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->memory_limit_hit(), output);
  }
  
  // optional bool inactive = 4;
  if (has_inactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inactive(), output);
  }
  
  // optional bool time_limit_hard = 5;
  if (has_time_limit_hard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->time_limit_hard(), output);
  }
  
  // optional bool stdout_overflow = 6;
  if (has_stdout_overflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->stdout_overflow(), output);
  }
  
  // optional bool stderr_overflow = 7;
  if (has_stderr_overflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->stderr_overflow(), output);
  }
  
  // optional bool stdpipe_timeout = 8;
  if (has_stdpipe_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->stdpipe_timeout(), output);
  }
  
  // optional bool time_limit_hit_post = 9;
  if (has_time_limit_hit_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->time_limit_hit_post(), output);
  }
  
  // optional bool memory_limit_hit_post = 10;
  if (has_memory_limit_hit_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->memory_limit_hit_post(), output);
  }
  
  // optional bool process_limit_hit = 11;
  if (has_process_limit_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->process_limit_hit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionResultFlags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool killed = 1;
  if (has_killed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->killed(), target);
  }
  
  // optional bool time_limit_hit = 2;
  if (has_time_limit_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->time_limit_hit(), target);
  }
  
  // optional bool memory_limit_hit = 3;
  if (has_memory_limit_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->memory_limit_hit(), target);
  }
  
  // optional bool inactive = 4;
  if (has_inactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->inactive(), target);
  }
  
  // optional bool time_limit_hard = 5;
  if (has_time_limit_hard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->time_limit_hard(), target);
  }
  
  // optional bool stdout_overflow = 6;
  if (has_stdout_overflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->stdout_overflow(), target);
  }
  
  // optional bool stderr_overflow = 7;
  if (has_stderr_overflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->stderr_overflow(), target);
  }
  
  // optional bool stdpipe_timeout = 8;
  if (has_stdpipe_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->stdpipe_timeout(), target);
  }
  
  // optional bool time_limit_hit_post = 9;
  if (has_time_limit_hit_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->time_limit_hit_post(), target);
  }
  
  // optional bool memory_limit_hit_post = 10;
  if (has_memory_limit_hit_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->memory_limit_hit_post(), target);
  }
  
  // optional bool process_limit_hit = 11;
  if (has_process_limit_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->process_limit_hit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionResultFlags::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool killed = 1;
    if (has_killed()) {
      total_size += 1 + 1;
    }
    
    // optional bool time_limit_hit = 2;
    if (has_time_limit_hit()) {
      total_size += 1 + 1;
    }
    
    // optional bool memory_limit_hit = 3;
    if (has_memory_limit_hit()) {
      total_size += 1 + 1;
    }
    
    // optional bool inactive = 4;
    if (has_inactive()) {
      total_size += 1 + 1;
    }
    
    // optional bool time_limit_hard = 5;
    if (has_time_limit_hard()) {
      total_size += 1 + 1;
    }
    
    // optional bool stdout_overflow = 6;
    if (has_stdout_overflow()) {
      total_size += 1 + 1;
    }
    
    // optional bool stderr_overflow = 7;
    if (has_stderr_overflow()) {
      total_size += 1 + 1;
    }
    
    // optional bool stdpipe_timeout = 8;
    if (has_stdpipe_timeout()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool time_limit_hit_post = 9;
    if (has_time_limit_hit_post()) {
      total_size += 1 + 1;
    }
    
    // optional bool memory_limit_hit_post = 10;
    if (has_memory_limit_hit_post()) {
      total_size += 1 + 1;
    }
    
    // optional bool process_limit_hit = 11;
    if (has_process_limit_hit()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionResultFlags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionResultFlags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionResultFlags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionResultFlags::MergeFrom(const ExecutionResultFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killed()) {
      set_killed(from.killed());
    }
    if (from.has_time_limit_hit()) {
      set_time_limit_hit(from.time_limit_hit());
    }
    if (from.has_memory_limit_hit()) {
      set_memory_limit_hit(from.memory_limit_hit());
    }
    if (from.has_inactive()) {
      set_inactive(from.inactive());
    }
    if (from.has_time_limit_hard()) {
      set_time_limit_hard(from.time_limit_hard());
    }
    if (from.has_stdout_overflow()) {
      set_stdout_overflow(from.stdout_overflow());
    }
    if (from.has_stderr_overflow()) {
      set_stderr_overflow(from.stderr_overflow());
    }
    if (from.has_stdpipe_timeout()) {
      set_stdpipe_timeout(from.stdpipe_timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_limit_hit_post()) {
      set_time_limit_hit_post(from.time_limit_hit_post());
    }
    if (from.has_memory_limit_hit_post()) {
      set_memory_limit_hit_post(from.memory_limit_hit_post());
    }
    if (from.has_process_limit_hit()) {
      set_process_limit_hit(from.process_limit_hit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionResultFlags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionResultFlags::CopyFrom(const ExecutionResultFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionResultFlags::IsInitialized() const {
  
  return true;
}

void ExecutionResultFlags::Swap(ExecutionResultFlags* other) {
  if (other != this) {
    std::swap(killed_, other->killed_);
    std::swap(time_limit_hit_, other->time_limit_hit_);
    std::swap(memory_limit_hit_, other->memory_limit_hit_);
    std::swap(inactive_, other->inactive_);
    std::swap(time_limit_hard_, other->time_limit_hard_);
    std::swap(stdout_overflow_, other->stdout_overflow_);
    std::swap(stderr_overflow_, other->stderr_overflow_);
    std::swap(stdpipe_timeout_, other->stdpipe_timeout_);
    std::swap(time_limit_hit_post_, other->time_limit_hit_post_);
    std::swap(memory_limit_hit_post_, other->memory_limit_hit_post_);
    std::swap(process_limit_hit_, other->process_limit_hit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionResultFlags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionResultFlags_descriptor_;
  metadata.reflection = ExecutionResultFlags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionResultTime::kUserTimeMicrosFieldNumber;
const int ExecutionResultTime::kKernelTimeMicrosFieldNumber;
const int ExecutionResultTime::kWallTimeMicrosFieldNumber;
#endif  // !_MSC_VER

ExecutionResultTime::ExecutionResultTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionResultTime::InitAsDefaultInstance() {
}

ExecutionResultTime::ExecutionResultTime(const ExecutionResultTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionResultTime::SharedCtor() {
  _cached_size_ = 0;
  user_time_micros_ = GOOGLE_ULONGLONG(0);
  kernel_time_micros_ = GOOGLE_ULONGLONG(0);
  wall_time_micros_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionResultTime::~ExecutionResultTime() {
  SharedDtor();
}

void ExecutionResultTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExecutionResultTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionResultTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionResultTime_descriptor_;
}

const ExecutionResultTime& ExecutionResultTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contester_2fproto_2fExecutionProto_2eproto();  return *default_instance_;
}

ExecutionResultTime* ExecutionResultTime::default_instance_ = NULL;

ExecutionResultTime* ExecutionResultTime::New() const {
  return new ExecutionResultTime;
}

void ExecutionResultTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_time_micros_ = GOOGLE_ULONGLONG(0);
    kernel_time_micros_ = GOOGLE_ULONGLONG(0);
    wall_time_micros_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionResultTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_time_micros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_time_micros_)));
          set_has_user_time_micros();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kernel_time_micros;
        break;
      }
      
      // optional uint64 kernel_time_micros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_time_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kernel_time_micros_)));
          set_has_kernel_time_micros();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wall_time_micros;
        break;
      }
      
      // optional uint64 wall_time_micros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wall_time_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wall_time_micros_)));
          set_has_wall_time_micros();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionResultTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_time_micros = 1;
  if (has_user_time_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_time_micros(), output);
  }
  
  // optional uint64 kernel_time_micros = 2;
  if (has_kernel_time_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kernel_time_micros(), output);
  }
  
  // optional uint64 wall_time_micros = 3;
  if (has_wall_time_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->wall_time_micros(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionResultTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_time_micros = 1;
  if (has_user_time_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_time_micros(), target);
  }
  
  // optional uint64 kernel_time_micros = 2;
  if (has_kernel_time_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kernel_time_micros(), target);
  }
  
  // optional uint64 wall_time_micros = 3;
  if (has_wall_time_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->wall_time_micros(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionResultTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_time_micros = 1;
    if (has_user_time_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_time_micros());
    }
    
    // optional uint64 kernel_time_micros = 2;
    if (has_kernel_time_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kernel_time_micros());
    }
    
    // optional uint64 wall_time_micros = 3;
    if (has_wall_time_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wall_time_micros());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionResultTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionResultTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionResultTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionResultTime::MergeFrom(const ExecutionResultTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_time_micros()) {
      set_user_time_micros(from.user_time_micros());
    }
    if (from.has_kernel_time_micros()) {
      set_kernel_time_micros(from.kernel_time_micros());
    }
    if (from.has_wall_time_micros()) {
      set_wall_time_micros(from.wall_time_micros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionResultTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionResultTime::CopyFrom(const ExecutionResultTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionResultTime::IsInitialized() const {
  
  return true;
}

void ExecutionResultTime::Swap(ExecutionResultTime* other) {
  if (other != this) {
    std::swap(user_time_micros_, other->user_time_micros_);
    std::swap(kernel_time_micros_, other->kernel_time_micros_);
    std::swap(wall_time_micros_, other->wall_time_micros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionResultTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionResultTime_descriptor_;
  metadata.reflection = ExecutionResultTime_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace contester

// @@protoc_insertion_point(global_scope)
