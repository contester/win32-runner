// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class AuthInfo;
class AuthInfo_Simple;
class Request;
class RpcError;
class RpcError_ExceptionInfo;
class Response;
class ProtocolMessage;
class LoggedProtocolMessage;

// ===================================================================

class AuthInfo_Simple : public ::google::protobuf::Message {
 public:
  AuthInfo_Simple();
  virtual ~AuthInfo_Simple();
  
  AuthInfo_Simple(const AuthInfo_Simple& from);
  
  inline AuthInfo_Simple& operator=(const AuthInfo_Simple& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthInfo_Simple& default_instance();
  
  void Swap(AuthInfo_Simple* other);
  
  // implements Message ----------------------------------------------
  
  AuthInfo_Simple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthInfo_Simple& from);
  void MergeFrom(const AuthInfo_Simple& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // @@protoc_insertion_point(class_scope:AuthInfo.Simple)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static AuthInfo_Simple* default_instance_;
};
// -------------------------------------------------------------------

class AuthInfo : public ::google::protobuf::Message {
 public:
  AuthInfo();
  virtual ~AuthInfo();
  
  AuthInfo(const AuthInfo& from);
  
  inline AuthInfo& operator=(const AuthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthInfo& default_instance();
  
  void Swap(AuthInfo* other);
  
  // implements Message ----------------------------------------------
  
  AuthInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthInfo& from);
  void MergeFrom(const AuthInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AuthInfo_Simple Simple;
  
  // accessors -------------------------------------------------------
  
  // optional .AuthInfo.Simple simple = 1;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 1;
  inline const ::AuthInfo_Simple& simple() const;
  inline ::AuthInfo_Simple* mutable_simple();
  inline ::AuthInfo_Simple* release_simple();
  
  // @@protoc_insertion_point(class_scope:AuthInfo)
 private:
  inline void set_has_simple();
  inline void clear_has_simple();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::AuthInfo_Simple* simple_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static AuthInfo* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string method_name = 1;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 1;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  
  // optional bytes message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional uint64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional uint64 deadline = 4;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 4;
  inline ::google::protobuf::uint64 deadline() const;
  inline void set_deadline(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:Request)
 private:
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* method_name_;
  ::std::string* message_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 deadline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class RpcError_ExceptionInfo : public ::google::protobuf::Message {
 public:
  RpcError_ExceptionInfo();
  virtual ~RpcError_ExceptionInfo();
  
  RpcError_ExceptionInfo(const RpcError_ExceptionInfo& from);
  
  inline RpcError_ExceptionInfo& operator=(const RpcError_ExceptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcError_ExceptionInfo& default_instance();
  
  void Swap(RpcError_ExceptionInfo* other);
  
  // implements Message ----------------------------------------------
  
  RpcError_ExceptionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcError_ExceptionInfo& from);
  void MergeFrom(const RpcError_ExceptionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes traceback = 1;
  inline bool has_traceback() const;
  inline void clear_traceback();
  static const int kTracebackFieldNumber = 1;
  inline const ::std::string& traceback() const;
  inline void set_traceback(const ::std::string& value);
  inline void set_traceback(const char* value);
  inline void set_traceback(const void* value, size_t size);
  inline ::std::string* mutable_traceback();
  inline ::std::string* release_traceback();
  
  // @@protoc_insertion_point(class_scope:RpcError.ExceptionInfo)
 private:
  inline void set_has_traceback();
  inline void clear_has_traceback();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* traceback_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static RpcError_ExceptionInfo* default_instance_;
};
// -------------------------------------------------------------------

class RpcError : public ::google::protobuf::Message {
 public:
  RpcError();
  virtual ~RpcError();
  
  RpcError(const RpcError& from);
  
  inline RpcError& operator=(const RpcError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcError& default_instance();
  
  void Swap(RpcError* other);
  
  // implements Message ----------------------------------------------
  
  RpcError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcError& from);
  void MergeFrom(const RpcError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RpcError_ExceptionInfo ExceptionInfo;
  
  // accessors -------------------------------------------------------
  
  // optional .RpcError.ExceptionInfo exception_info = 1;
  inline bool has_exception_info() const;
  inline void clear_exception_info();
  static const int kExceptionInfoFieldNumber = 1;
  inline const ::RpcError_ExceptionInfo& exception_info() const;
  inline ::RpcError_ExceptionInfo* mutable_exception_info();
  inline ::RpcError_ExceptionInfo* release_exception_info();
  
  // @@protoc_insertion_point(class_scope:RpcError)
 private:
  inline void set_has_exception_info();
  inline void clear_has_exception_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::RpcError_ExceptionInfo* exception_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static RpcError* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // optional uint32 streaming = 2;
  inline bool has_streaming() const;
  inline void clear_streaming();
  static const int kStreamingFieldNumber = 2;
  inline ::google::protobuf::uint32 streaming() const;
  inline void set_streaming(::google::protobuf::uint32 value);
  
  // optional uint64 timing = 3;
  inline bool has_timing() const;
  inline void clear_timing();
  static const int kTimingFieldNumber = 3;
  inline ::google::protobuf::uint64 timing() const;
  inline void set_timing(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:Response)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_streaming();
  inline void clear_has_streaming();
  inline void set_has_timing();
  inline void clear_has_timing();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  ::google::protobuf::uint64 timing_;
  ::google::protobuf::uint32 streaming_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ProtocolMessage : public ::google::protobuf::Message {
 public:
  ProtocolMessage();
  virtual ~ProtocolMessage();
  
  ProtocolMessage(const ProtocolMessage& from);
  
  inline ProtocolMessage& operator=(const ProtocolMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolMessage& default_instance();
  
  void Swap(ProtocolMessage* other);
  
  // implements Message ----------------------------------------------
  
  ProtocolMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolMessage& from);
  void MergeFrom(const ProtocolMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 sequence_number = 1;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint32 value);
  
  // optional .Request request = 2;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline const ::Request& request() const;
  inline ::Request* mutable_request();
  inline ::Request* release_request();
  
  // optional .Response response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::Response& response() const;
  inline ::Response* mutable_response();
  inline ::Response* release_response();
  
  // optional .RpcError error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::RpcError& error() const;
  inline ::RpcError* mutable_error();
  inline ::RpcError* release_error();
  
  // optional .AuthInfo auth_info = 5;
  inline bool has_auth_info() const;
  inline void clear_auth_info();
  static const int kAuthInfoFieldNumber = 5;
  inline const ::AuthInfo& auth_info() const;
  inline ::AuthInfo* mutable_auth_info();
  inline ::AuthInfo* release_auth_info();
  
  // @@protoc_insertion_point(class_scope:ProtocolMessage)
 private:
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_auth_info();
  inline void clear_has_auth_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Request* request_;
  ::Response* response_;
  ::RpcError* error_;
  ::AuthInfo* auth_info_;
  ::google::protobuf::uint32 sequence_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static ProtocolMessage* default_instance_;
};
// -------------------------------------------------------------------

class LoggedProtocolMessage : public ::google::protobuf::Message {
 public:
  LoggedProtocolMessage();
  virtual ~LoggedProtocolMessage();
  
  LoggedProtocolMessage(const LoggedProtocolMessage& from);
  
  inline LoggedProtocolMessage& operator=(const LoggedProtocolMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggedProtocolMessage& default_instance();
  
  void Swap(LoggedProtocolMessage* other);
  
  // implements Message ----------------------------------------------
  
  LoggedProtocolMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoggedProtocolMessage& from);
  void MergeFrom(const LoggedProtocolMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional .ProtocolMessage sent = 2;
  inline bool has_sent() const;
  inline void clear_sent();
  static const int kSentFieldNumber = 2;
  inline const ::ProtocolMessage& sent() const;
  inline ::ProtocolMessage* mutable_sent();
  inline ::ProtocolMessage* release_sent();
  
  // optional .ProtocolMessage received = 3;
  inline bool has_received() const;
  inline void clear_received();
  static const int kReceivedFieldNumber = 3;
  inline const ::ProtocolMessage& received() const;
  inline ::ProtocolMessage* mutable_received();
  inline ::ProtocolMessage* release_received();
  
  // @@protoc_insertion_point(class_scope:LoggedProtocolMessage)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sent();
  inline void clear_has_sent();
  inline void set_has_received();
  inline void clear_has_received();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 timestamp_;
  ::ProtocolMessage* sent_;
  ::ProtocolMessage* received_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  void InitAsDefaultInstance();
  static LoggedProtocolMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthInfo_Simple

// optional string username = 1;
inline bool AuthInfo_Simple::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthInfo_Simple::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthInfo_Simple::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthInfo_Simple::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& AuthInfo_Simple::username() const {
  return *username_;
}
inline void AuthInfo_Simple::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AuthInfo_Simple::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void AuthInfo_Simple::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthInfo_Simple::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* AuthInfo_Simple::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 2;
inline bool AuthInfo_Simple::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthInfo_Simple::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthInfo_Simple::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthInfo_Simple::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& AuthInfo_Simple::password() const {
  return *password_;
}
inline void AuthInfo_Simple::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AuthInfo_Simple::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void AuthInfo_Simple::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthInfo_Simple::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* AuthInfo_Simple::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AuthInfo

// optional .AuthInfo.Simple simple = 1;
inline bool AuthInfo::has_simple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthInfo::set_has_simple() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthInfo::clear_has_simple() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthInfo::clear_simple() {
  if (simple_ != NULL) simple_->::AuthInfo_Simple::Clear();
  clear_has_simple();
}
inline const ::AuthInfo_Simple& AuthInfo::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::AuthInfo_Simple* AuthInfo::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::AuthInfo_Simple;
  return simple_;
}
inline ::AuthInfo_Simple* AuthInfo::release_simple() {
  clear_has_simple();
  ::AuthInfo_Simple* temp = simple_;
  simple_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Request

// optional string method_name = 1;
inline bool Request::has_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_method_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& Request::method_name() const {
  return *method_name_;
}
inline void Request::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void Request::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void Request::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* Request::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes message = 2;
inline bool Request::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Request::message() const {
  return *message_;
}
inline void Request::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Request::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Request::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Request::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 timestamp = 3;
inline bool Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Request::timestamp() const {
  return timestamp_;
}
inline void Request::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional uint64 deadline = 4;
inline bool Request::has_deadline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_deadline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_deadline() {
  deadline_ = GOOGLE_ULONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::uint64 Request::deadline() const {
  return deadline_;
}
inline void Request::set_deadline(::google::protobuf::uint64 value) {
  set_has_deadline();
  deadline_ = value;
}

// -------------------------------------------------------------------

// RpcError_ExceptionInfo

// optional bytes traceback = 1;
inline bool RpcError_ExceptionInfo::has_traceback() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcError_ExceptionInfo::set_has_traceback() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcError_ExceptionInfo::clear_has_traceback() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcError_ExceptionInfo::clear_traceback() {
  if (traceback_ != &::google::protobuf::internal::kEmptyString) {
    traceback_->clear();
  }
  clear_has_traceback();
}
inline const ::std::string& RpcError_ExceptionInfo::traceback() const {
  return *traceback_;
}
inline void RpcError_ExceptionInfo::set_traceback(const ::std::string& value) {
  set_has_traceback();
  if (traceback_ == &::google::protobuf::internal::kEmptyString) {
    traceback_ = new ::std::string;
  }
  traceback_->assign(value);
}
inline void RpcError_ExceptionInfo::set_traceback(const char* value) {
  set_has_traceback();
  if (traceback_ == &::google::protobuf::internal::kEmptyString) {
    traceback_ = new ::std::string;
  }
  traceback_->assign(value);
}
inline void RpcError_ExceptionInfo::set_traceback(const void* value, size_t size) {
  set_has_traceback();
  if (traceback_ == &::google::protobuf::internal::kEmptyString) {
    traceback_ = new ::std::string;
  }
  traceback_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcError_ExceptionInfo::mutable_traceback() {
  set_has_traceback();
  if (traceback_ == &::google::protobuf::internal::kEmptyString) {
    traceback_ = new ::std::string;
  }
  return traceback_;
}
inline ::std::string* RpcError_ExceptionInfo::release_traceback() {
  clear_has_traceback();
  if (traceback_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = traceback_;
    traceback_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcError

// optional .RpcError.ExceptionInfo exception_info = 1;
inline bool RpcError::has_exception_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcError::set_has_exception_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcError::clear_has_exception_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcError::clear_exception_info() {
  if (exception_info_ != NULL) exception_info_->::RpcError_ExceptionInfo::Clear();
  clear_has_exception_info();
}
inline const ::RpcError_ExceptionInfo& RpcError::exception_info() const {
  return exception_info_ != NULL ? *exception_info_ : *default_instance_->exception_info_;
}
inline ::RpcError_ExceptionInfo* RpcError::mutable_exception_info() {
  set_has_exception_info();
  if (exception_info_ == NULL) exception_info_ = new ::RpcError_ExceptionInfo;
  return exception_info_;
}
inline ::RpcError_ExceptionInfo* RpcError::release_exception_info() {
  clear_has_exception_info();
  ::RpcError_ExceptionInfo* temp = exception_info_;
  exception_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Response

// optional bytes message = 1;
inline bool Response::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Response::message() const {
  return *message_;
}
inline void Response::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Response::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 streaming = 2;
inline bool Response::has_streaming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_streaming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_streaming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_streaming() {
  streaming_ = 0u;
  clear_has_streaming();
}
inline ::google::protobuf::uint32 Response::streaming() const {
  return streaming_;
}
inline void Response::set_streaming(::google::protobuf::uint32 value) {
  set_has_streaming();
  streaming_ = value;
}

// optional uint64 timing = 3;
inline bool Response::has_timing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_timing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_timing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_timing() {
  timing_ = GOOGLE_ULONGLONG(0);
  clear_has_timing();
}
inline ::google::protobuf::uint64 Response::timing() const {
  return timing_;
}
inline void Response::set_timing(::google::protobuf::uint64 value) {
  set_has_timing();
  timing_ = value;
}

// -------------------------------------------------------------------

// ProtocolMessage

// optional uint32 sequence_number = 1;
inline bool ProtocolMessage::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtocolMessage::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtocolMessage::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtocolMessage::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
inline ::google::protobuf::uint32 ProtocolMessage::sequence_number() const {
  return sequence_number_;
}
inline void ProtocolMessage::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// optional .Request request = 2;
inline bool ProtocolMessage::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtocolMessage::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtocolMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtocolMessage::clear_request() {
  if (request_ != NULL) request_->::Request::Clear();
  clear_has_request();
}
inline const ::Request& ProtocolMessage::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::Request* ProtocolMessage::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::Request;
  return request_;
}
inline ::Request* ProtocolMessage::release_request() {
  clear_has_request();
  ::Request* temp = request_;
  request_ = NULL;
  return temp;
}

// optional .Response response = 3;
inline bool ProtocolMessage::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtocolMessage::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtocolMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtocolMessage::clear_response() {
  if (response_ != NULL) response_->::Response::Clear();
  clear_has_response();
}
inline const ::Response& ProtocolMessage::response() const {
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::Response* ProtocolMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::Response;
  return response_;
}
inline ::Response* ProtocolMessage::release_response() {
  clear_has_response();
  ::Response* temp = response_;
  response_ = NULL;
  return temp;
}

// optional .RpcError error = 4;
inline bool ProtocolMessage::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtocolMessage::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtocolMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtocolMessage::clear_error() {
  if (error_ != NULL) error_->::RpcError::Clear();
  clear_has_error();
}
inline const ::RpcError& ProtocolMessage::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::RpcError* ProtocolMessage::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::RpcError;
  return error_;
}
inline ::RpcError* ProtocolMessage::release_error() {
  clear_has_error();
  ::RpcError* temp = error_;
  error_ = NULL;
  return temp;
}

// optional .AuthInfo auth_info = 5;
inline bool ProtocolMessage::has_auth_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtocolMessage::set_has_auth_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtocolMessage::clear_has_auth_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtocolMessage::clear_auth_info() {
  if (auth_info_ != NULL) auth_info_->::AuthInfo::Clear();
  clear_has_auth_info();
}
inline const ::AuthInfo& ProtocolMessage::auth_info() const {
  return auth_info_ != NULL ? *auth_info_ : *default_instance_->auth_info_;
}
inline ::AuthInfo* ProtocolMessage::mutable_auth_info() {
  set_has_auth_info();
  if (auth_info_ == NULL) auth_info_ = new ::AuthInfo;
  return auth_info_;
}
inline ::AuthInfo* ProtocolMessage::release_auth_info() {
  clear_has_auth_info();
  ::AuthInfo* temp = auth_info_;
  auth_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// LoggedProtocolMessage

// optional uint64 timestamp = 1;
inline bool LoggedProtocolMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoggedProtocolMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoggedProtocolMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoggedProtocolMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 LoggedProtocolMessage::timestamp() const {
  return timestamp_;
}
inline void LoggedProtocolMessage::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .ProtocolMessage sent = 2;
inline bool LoggedProtocolMessage::has_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoggedProtocolMessage::set_has_sent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoggedProtocolMessage::clear_has_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoggedProtocolMessage::clear_sent() {
  if (sent_ != NULL) sent_->::ProtocolMessage::Clear();
  clear_has_sent();
}
inline const ::ProtocolMessage& LoggedProtocolMessage::sent() const {
  return sent_ != NULL ? *sent_ : *default_instance_->sent_;
}
inline ::ProtocolMessage* LoggedProtocolMessage::mutable_sent() {
  set_has_sent();
  if (sent_ == NULL) sent_ = new ::ProtocolMessage;
  return sent_;
}
inline ::ProtocolMessage* LoggedProtocolMessage::release_sent() {
  clear_has_sent();
  ::ProtocolMessage* temp = sent_;
  sent_ = NULL;
  return temp;
}

// optional .ProtocolMessage received = 3;
inline bool LoggedProtocolMessage::has_received() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoggedProtocolMessage::set_has_received() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoggedProtocolMessage::clear_has_received() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoggedProtocolMessage::clear_received() {
  if (received_ != NULL) received_->::ProtocolMessage::Clear();
  clear_has_received();
}
inline const ::ProtocolMessage& LoggedProtocolMessage::received() const {
  return received_ != NULL ? *received_ : *default_instance_->received_;
}
inline ::ProtocolMessage* LoggedProtocolMessage::mutable_received() {
  set_has_received();
  if (received_ == NULL) received_ = new ::ProtocolMessage;
  return received_;
}
inline ::ProtocolMessage* LoggedProtocolMessage::release_received() {
  clear_has_received();
  ::ProtocolMessage* temp = received_;
  received_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
